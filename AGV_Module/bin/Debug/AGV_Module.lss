
bin\Debug\AGV_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  00000d16  00000dca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d16  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080021c  0080021c  00000de6  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000198  00000000  00000000  00000e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001f84  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000014a9  00000000  00000000  00002f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000019e9  00000000  00000000  00004405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000003f4  00000000  00000000  00005df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000848  00000000  00000000  000061e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000206  00000000  00000000  00006a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000007af  00000000  00000000  00006c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000007b  00000000  00000000  000073e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 94 00 	jmp	0x128	; 0x128 <__ctors_end>
   4:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_1>
   8:	0c 94 a3 02 	jmp	0x546	; 0x546 <__vector_2>
   c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  48:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  50:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  54:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_21>
  58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  68:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  6c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  70:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  74:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  7c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  80:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  84:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  8c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  90:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  94:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  98:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  9c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  a0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  a4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  a8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  ac:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  b0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  b4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  b8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  bc:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  c0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  c4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  c8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  cc:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  d0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  d4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  d8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  dc:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  e0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>

000000e4 <__trampolines_start>:
  e4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <.L8>
  e8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <.L11>
  ec:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <.L19>
  f0:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <.L6>
  f4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <.L10>
  f8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <.L12>
  fc:	0c 94 c5 00 	jmp	0x18a	; 0x18a <.L17>
 100:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <.L20>
 104:	0c 94 c7 00 	jmp	0x18e	; 0x18e <.L18>
 108:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <.L3>
 10c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <.L13>
 110:	0c 94 ce 00 	jmp	0x19c	; 0x19c <.L15>
 114:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <.L9>
 118:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <.L2>
 11c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <.L14>
 120:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <.L7>
 124:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <.L5>

00000128 <__ctors_end>:
 128:	11 24       	eor	r1, r1
 12a:	1f be       	out	0x3f, r1	; 63
 12c:	cf ef       	ldi	r28, 0xFF	; 255
 12e:	d1 e2       	ldi	r29, 0x21	; 33
 130:	de bf       	out	0x3e, r29	; 62
 132:	cd bf       	out	0x3d, r28	; 61
 134:	00 e0       	ldi	r16, 0x00	; 0
 136:	0c bf       	out	0x3c, r16	; 60

00000138 <__do_copy_data>:
 138:	12 e0       	ldi	r17, 0x02	; 2

0000013a <.Loc.1>:
 13a:	a0 e0       	ldi	r26, 0x00	; 0

0000013c <.Loc.2>:
 13c:	b2 e0       	ldi	r27, 0x02	; 2

0000013e <.Loc.3>:
 13e:	e6 e1       	ldi	r30, 0x16	; 22

00000140 <.Loc.4>:
 140:	fd e0       	ldi	r31, 0x0D	; 13

00000142 <.Loc.5>:
 142:	00 e0       	ldi	r16, 0x00	; 0

00000144 <.Loc.6>:
 144:	0b bf       	out	0x3b, r16	; 59

00000146 <.Loc.7>:
 146:	02 c0       	rjmp	.+4      	; 0x14c <.L__do_copy_data_start>

00000148 <.L__do_copy_data_loop>:
 148:	07 90       	elpm	r0, Z+

0000014a <.Loc.9>:
 14a:	0d 92       	st	X+, r0

0000014c <.L__do_copy_data_start>:
 14c:	ac 31       	cpi	r26, 0x1C	; 28

0000014e <.Loc.11>:
 14e:	b1 07       	cpc	r27, r17

00000150 <.Loc.12>:
 150:	d9 f7       	brne	.-10     	; 0x148 <.L__do_copy_data_loop>

00000152 <__do_clear_bss>:
 152:	22 e0       	ldi	r18, 0x02	; 2

00000154 <.Loc.1>:
 154:	ac e1       	ldi	r26, 0x1C	; 28

00000156 <.Loc.2>:
 156:	b2 e0       	ldi	r27, 0x02	; 2

00000158 <.Loc.3>:
 158:	01 c0       	rjmp	.+2      	; 0x15c <.Loc.5>

0000015a <.Loc.4>:
 15a:	1d 92       	st	X+, r1

0000015c <.Loc.5>:
 15c:	a0 33       	cpi	r26, 0x30	; 48

0000015e <.Loc.6>:
 15e:	b2 07       	cpc	r27, r18

00000160 <.Loc.7>:
 160:	e1 f7       	brne	.-8      	; 0x15a <.Loc.4>

00000162 <L0^A>:
 162:	0e 94 cc 02 	call	0x598	; 0x598 <main>
 166:	0c 94 53 06 	jmp	0xca6	; 0xca6 <_exit>

0000016a <__bad_interrupt>:
 16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <char_to_segment>:
    0b01111010, // d
    0b10011110, // E
    0b10001110  // F
};

uint8_t char_to_segment(char c) {
 16e:	98 2f       	mov	r25, r24

00000170 <.Loc.2>:
    switch (c) {
 170:	e0 ee       	ldi	r30, 0xE0	; 224
 172:	e8 0f       	add	r30, r24
 174:	e6 33       	cpi	r30, 0x36	; 54
 176:	60 f5       	brcc	.+88     	; 0x1d0 <.L2>
 178:	0e 2e       	mov	r0, r30
 17a:	00 0c       	add	r0, r0
 17c:	ff 0b       	sbc	r31, r31
 17e:	88 27       	eor	r24, r24
 180:	eb 5a       	subi	r30, 0xAB	; 171
 182:	f9 4f       	sbci	r31, 0xF9	; 249
 184:	8f 4f       	sbci	r24, 0xFF	; 255
 186:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__tablejump2__>

0000018a <.L17>:
        case '0' ... '9': return segmentcodes[c - '0'];
        case 'A': return 0b11101110;
 18a:	8e ee       	ldi	r24, 0xEE	; 238
 18c:	08 95       	ret

0000018e <.L18>:
    switch (c) {
 18e:	e9 2f       	mov	r30, r25
 190:	99 0f       	add	r25, r25
 192:	ff 0b       	sbc	r31, r31

00000194 <.Loc.6>:
        case '0' ... '9': return segmentcodes[c - '0'];
 194:	ee 52       	subi	r30, 0x2E	; 46
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	80 81       	ld	r24, Z
 19a:	08 95       	ret

0000019c <.L15>:
        case 'B': return 0b00111110;
        case 'C': return 0b10011100;
 19c:	8c e9       	ldi	r24, 0x9C	; 156
 19e:	08 95       	ret

000001a0 <.L14>:
        case 'D': return 0b01111010;
 1a0:	8a e7       	ldi	r24, 0x7A	; 122
 1a2:	08 95       	ret

000001a4 <.L13>:
        case 'E': return 0b10011110;
 1a4:	8e e9       	ldi	r24, 0x9E	; 158
 1a6:	08 95       	ret

000001a8 <.L12>:
        case 'F': return 0b10001110;
 1a8:	8e e8       	ldi	r24, 0x8E	; 142
 1aa:	08 95       	ret

000001ac <.L11>:
        case 'L': return 0b00011100;
 1ac:	8c e1       	ldi	r24, 0x1C	; 28
 1ae:	08 95       	ret

000001b0 <.L10>:
        case 'N': return 0b11101100;
 1b0:	8c ee       	ldi	r24, 0xEC	; 236
 1b2:	08 95       	ret

000001b4 <.L9>:
        case 'O': return 0b11111100;
 1b4:	8c ef       	ldi	r24, 0xFC	; 252
 1b6:	08 95       	ret

000001b8 <.L8>:
        case 'P': return 0b11001110;
 1b8:	8e ec       	ldi	r24, 0xCE	; 206
 1ba:	08 95       	ret

000001bc <.L7>:
        case 'R': return 0b00001010;
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	08 95       	ret

000001c0 <.L6>:
        case 'S': return 0b10110110;
 1c0:	86 eb       	ldi	r24, 0xB6	; 182
 1c2:	08 95       	ret

000001c4 <.L5>:
        case 'T': return 0b00011110;
 1c4:	8e e1       	ldi	r24, 0x1E	; 30
 1c6:	08 95       	ret

000001c8 <.L3>:
        case 'U': return 0b01111100;
 1c8:	8c e7       	ldi	r24, 0x7C	; 124
 1ca:	08 95       	ret

000001cc <.L19>:
        case ' ': return 0x00; // alles uit
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret

000001d0 <.L2>:
        default:  return 0x00; // onbekende tekens = uit
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret

000001d4 <.L20>:
    switch (c) {
 1d4:	8e e3       	ldi	r24, 0x3E	; 62

000001d6 <.Loc.36>:
    }
}
 1d6:	08 95       	ret

000001d8 <init_display>:


void init_display (void)
{
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
 1d8:	ea e0       	ldi	r30, 0x0A	; 10
 1da:	f1 e0       	ldi	r31, 0x01	; 1
 1dc:	80 81       	ld	r24, Z

000001de <.Loc.39>:
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	80 83       	st	Z, r24

000001e2 <.Loc.40>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
 1e2:	80 81       	ld	r24, Z

000001e4 <.Loc.41>:
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	80 83       	st	Z, r24

000001e8 <.Loc.42>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
 1e8:	80 81       	ld	r24, Z

000001ea <.Loc.43>:
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	80 83       	st	Z, r24

000001ee <.Loc.44>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 1ee:	eb e0       	ldi	r30, 0x0B	; 11
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	80 81       	ld	r24, Z
 1f4:	8f 7d       	andi	r24, 0xDF	; 223
 1f6:	80 83       	st	Z, r24

000001f8 <.Loc.46>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 1f8:	80 81       	ld	r24, Z
 1fa:	8f 7b       	andi	r24, 0xBF	; 191
 1fc:	80 83       	st	Z, r24

000001fe <.Loc.48>:
}
 1fe:	08 95       	ret

00000200 <send_data>:

void send_data(char data)
{
 200:	28 e0       	ldi	r18, 0x08	; 8
 202:	30 e0       	ldi	r19, 0x00	; 0

00000204 <.Loc.54>:
		{
			PORT_SDI |= (1 << SDI_BIT);
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
 204:	eb e0       	ldi	r30, 0x0B	; 11
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	0e c0       	rjmp	.+28     	; 0x226 <.L25>

0000020a <.L23>:
 20a:	90 81       	ld	r25, Z

0000020c <.Loc.57>:
 20c:	9f 77       	andi	r25, 0x7F	; 127
 20e:	90 83       	st	Z, r25

00000210 <.L24>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
 210:	90 81       	ld	r25, Z

00000212 <.Loc.59>:
 212:	90 62       	ori	r25, 0x20	; 32
 214:	90 83       	st	Z, r25

00000216 <.Loc.60>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
 216:	90 81       	ld	r25, Z
 218:	9f 7d       	andi	r25, 0xDF	; 223
 21a:	90 83       	st	Z, r25

0000021c <.Loc.62>:
	for (unsigned i = 0; i < 8; i++)
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	31 09       	sbc	r19, r1

00000220 <.Loc.64>:
 220:	21 15       	cp	r18, r1
 222:	31 05       	cpc	r19, r1
 224:	49 f0       	breq	.+18     	; 0x238 <.L27>

00000226 <.L25>:
		int bit = data & 1;
 226:	98 2f       	mov	r25, r24
 228:	91 70       	andi	r25, 0x01	; 1

0000022a <.Loc.66>:
		data >>= 1;
 22a:	85 95       	asr	r24

0000022c <.Loc.68>:
		if (bit)
 22c:	99 23       	and	r25, r25
 22e:	69 f3       	breq	.-38     	; 0x20a <.L23>

00000230 <.Loc.70>:
			PORT_SDI |= (1 << SDI_BIT);
 230:	90 81       	ld	r25, Z

00000232 <.Loc.71>:
 232:	90 68       	ori	r25, 0x80	; 128
 234:	90 83       	st	Z, r25
 236:	ec cf       	rjmp	.-40     	; 0x210 <.L24>

00000238 <.L27>:
	}
}
 238:	08 95       	ret

0000023a <display>:

void display(uint8_t segmentdata, uint8_t digitbit) {
 23a:	cf 93       	push	r28
 23c:	c8 2f       	mov	r28, r24
 23e:	86 2f       	mov	r24, r22

00000240 <.Loc.76>:
    send_data(digitbit);         // digits eerst
 240:	0e 94 00 01 	call	0x200	; 0x200 <send_data>

00000244 <.LVL13>:
    send_data(segmentdata);     // segmenten actief laag
 244:	8c 2f       	mov	r24, r28
 246:	0e 94 00 01 	call	0x200	; 0x200 <send_data>

0000024a <.LVL14>:

    PORT_LCHCLK |= (1 << LCHCLK_BIT);
 24a:	eb e0       	ldi	r30, 0x0B	; 11
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	80 81       	ld	r24, Z

00000250 <.Loc.79>:
 250:	80 64       	ori	r24, 0x40	; 64
 252:	80 83       	st	Z, r24

00000254 <.Loc.80>:
    PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
 254:	80 81       	ld	r24, Z
 256:	8f 7b       	andi	r24, 0xBF	; 191
 258:	80 83       	st	Z, r24

0000025a <.Loc.82>:
}
 25a:	cf 91       	pop	r28

0000025c <.Loc.83>:
 25c:	08 95       	ret

0000025e <display_getal>:


void display_getal(uint32_t getal) {
 25e:	8f 92       	push	r8
 260:	9f 92       	push	r9
 262:	af 92       	push	r10
 264:	bf 92       	push	r11
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	c6 2e       	mov	r12, r22
 278:	d7 2e       	mov	r13, r23
 27a:	08 2f       	mov	r16, r24
 27c:	19 2f       	mov	r17, r25

0000027e <.Loc.86>:
 27e:	c0 e0       	ldi	r28, 0x00	; 0
 280:	d0 e0       	ldi	r29, 0x00	; 0

00000282 <.LBB27>:
    for (uint8_t i = 0; i < 8; i++) {
        uint8_t cijfer = getal % 10;
 282:	0f 2e       	mov	r0, r31
 284:	fa e0       	ldi	r31, 0x0A	; 10
 286:	8f 2e       	mov	r8, r31
 288:	91 2c       	mov	r9, r1
 28a:	a1 2c       	mov	r10, r1
 28c:	b1 2c       	mov	r11, r1
 28e:	f0 2d       	mov	r31, r0

00000290 <.Loc.91>:
        getal /= 10;

        // Bereken bitpositie van digit: 0 t/m 7
        uint8_t digitbit = ~(1 << i);  // actief laag
 290:	ee 24       	eor	r14, r14
 292:	e3 94       	inc	r14
 294:	f1 2c       	mov	r15, r1

00000296 <.L30>:
        getal /= 10;
 296:	6c 2d       	mov	r22, r12
 298:	7d 2d       	mov	r23, r13
 29a:	80 2f       	mov	r24, r16
 29c:	91 2f       	mov	r25, r17
 29e:	a5 01       	movw	r20, r10
 2a0:	94 01       	movw	r18, r8
 2a2:	0e 94 1a 06 	call	0xc34	; 0xc34 <__udivmodsi4>
 2a6:	c2 2e       	mov	r12, r18

000002a8 <.Loc.95>:
 2a8:	d3 2e       	mov	r13, r19
 2aa:	04 2f       	mov	r16, r20
 2ac:	15 2f       	mov	r17, r21
 2ae:	e6 2f       	mov	r30, r22

000002b0 <.Loc.96>:
        uint8_t digitbit = ~(1 << i);  // actief laag
 2b0:	b7 01       	movw	r22, r14
 2b2:	0c 2e       	mov	r0, r28
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <.L2^B1>

000002b6 <.L1^B1>:
 2b6:	66 0f       	add	r22, r22
 2b8:	77 1f       	adc	r23, r23

000002ba <.L2^B1>:
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <.L1^B1>

000002be <.Loc.99>:
 2be:	60 95       	com	r22

000002c0 <.Loc.100>:

        display(segmentcodes[cijfer], digitbit);
 2c0:	f0 e0       	ldi	r31, 0x00	; 0

000002c2 <.Loc.101>:
 2c2:	ee 5f       	subi	r30, 0xFE	; 254
 2c4:	fd 4f       	sbci	r31, 0xFD	; 253

000002c6 <.Loc.102>:
 2c6:	80 81       	ld	r24, Z
 2c8:	0e 94 1d 01 	call	0x23a	; 0x23a <display>

000002cc <.LBB28>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	8f e9       	ldi	r24, 0x9F	; 159
 2ce:	9f e0       	ldi	r25, 0x0F	; 15

000002d0 <.L1^B2>:
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <.L1^B2>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <L0^A>

000002d6 <L0^A>:
	...

000002d8 <.LBE27>:
    for (uint8_t i = 0; i < 8; i++) {
 2d8:	21 96       	adiw	r28, 0x01	; 1

000002da <.Loc.114>:
 2da:	c8 30       	cpi	r28, 0x08	; 8
 2dc:	d1 05       	cpc	r29, r1
 2de:	d9 f6       	brne	.-74     	; 0x296 <.L30>

000002e0 <.Loc.115>:

        _delay_ms(1);  // 1 ms per digit = 1 kHz refresh
    }
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28

000002e4 <.Loc.116>:
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	df 90       	pop	r13
 2ee:	cf 90       	pop	r12
 2f0:	bf 90       	pop	r11
 2f2:	af 90       	pop	r10
 2f4:	9f 90       	pop	r9
 2f6:	8f 90       	pop	r8
 2f8:	08 95       	ret

000002fa <display1_string>:
void display1_string(const char* txt) {
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29

00000306 <.Loc.119>:
    for (uint8_t i = 0; i < 4; i++) {
 306:	8c 01       	movw	r16, r24
 308:	0c 5f       	subi	r16, 0xFC	; 252
 30a:	1f 4f       	sbci	r17, 0xFF	; 255

0000030c <.Loc.122>:
void display1_string(const char* txt) {
 30c:	c4 e0       	ldi	r28, 0x04	; 4
 30e:	d0 e0       	ldi	r29, 0x00	; 0

00000310 <.LBB32>:
        char c = txt[3 - i];
        uint8_t seg = char_to_segment(c);
        uint8_t digit = ~(1 << (4 + i));  // bovenste display: digit 4-7
 310:	ee 24       	eor	r14, r14
 312:	e3 94       	inc	r14
 314:	f1 2c       	mov	r15, r1

00000316 <.L33>:
        uint8_t seg = char_to_segment(c);
 316:	f8 01       	movw	r30, r16
 318:	82 91       	ld	r24, -Z

0000031a <.Loc.127>:
 31a:	8f 01       	movw	r16, r30
 31c:	0e 94 b7 00 	call	0x16e	; 0x16e <char_to_segment>

00000320 <.LVL29>:
        uint8_t digit = ~(1 << (4 + i));  // bovenste display: digit 4-7
 320:	b7 01       	movw	r22, r14
 322:	0c 2e       	mov	r0, r28
 324:	02 c0       	rjmp	.+4      	; 0x32a <.L2^B2>

00000326 <.L1^B3>:
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23

0000032a <.L2^B2>:
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <.L1^B3>

0000032e <.Loc.131>:
 32e:	60 95       	com	r22

00000330 <.Loc.132>:
        display(seg, digit);
 330:	0e 94 1d 01 	call	0x23a	; 0x23a <display>

00000334 <.LBB33>:
 334:	8f e9       	ldi	r24, 0x9F	; 159
 336:	9f e0       	ldi	r25, 0x0F	; 15

00000338 <.L1^B4>:
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <.L1^B4>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <L0^A>

0000033e <L0^A>:
	...

00000340 <.LBE32>:
    for (uint8_t i = 0; i < 4; i++) {
 340:	21 96       	adiw	r28, 0x01	; 1

00000342 <.Loc.144>:
 342:	c8 30       	cpi	r28, 0x08	; 8
 344:	d1 05       	cpc	r29, r1
 346:	39 f7       	brne	.-50     	; 0x316 <.L33>

00000348 <.Loc.145>:
        _delay_ms(1);
    }
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28

0000034c <.Loc.146>:
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	08 95       	ret

00000356 <display2_string>:

void display2_string(const char* txt) {
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29

00000362 <.Loc.149>:
    for (uint8_t i = 0; i < 4; i++) {
 362:	8c 01       	movw	r16, r24
 364:	0c 5f       	subi	r16, 0xFC	; 252
 366:	1f 4f       	sbci	r17, 0xFF	; 255

00000368 <.Loc.152>:
void display2_string(const char* txt) {
 368:	c0 e0       	ldi	r28, 0x00	; 0
 36a:	d0 e0       	ldi	r29, 0x00	; 0

0000036c <.LBB37>:
        char c = txt[3 - i];
        uint8_t seg = char_to_segment(c);
        uint8_t digit = ~(1 << i);  // onderste display: digit 0-3
 36c:	ee 24       	eor	r14, r14
 36e:	e3 94       	inc	r14
 370:	f1 2c       	mov	r15, r1

00000372 <.L36>:
        uint8_t seg = char_to_segment(c);
 372:	f8 01       	movw	r30, r16
 374:	82 91       	ld	r24, -Z

00000376 <.Loc.157>:
 376:	8f 01       	movw	r16, r30
 378:	0e 94 b7 00 	call	0x16e	; 0x16e <char_to_segment>

0000037c <.LVL38>:
        uint8_t digit = ~(1 << i);  // onderste display: digit 0-3
 37c:	b7 01       	movw	r22, r14
 37e:	0c 2e       	mov	r0, r28
 380:	02 c0       	rjmp	.+4      	; 0x386 <.L2^B3>

00000382 <.L1^B5>:
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23

00000386 <.L2^B3>:
 386:	0a 94       	dec	r0
 388:	e2 f7       	brpl	.-8      	; 0x382 <.L1^B5>

0000038a <.Loc.161>:
 38a:	60 95       	com	r22

0000038c <.Loc.162>:
        display(seg, digit);
 38c:	0e 94 1d 01 	call	0x23a	; 0x23a <display>

00000390 <.LBB38>:
 390:	8f e9       	ldi	r24, 0x9F	; 159
 392:	9f e0       	ldi	r25, 0x0F	; 15

00000394 <.L1^B6>:
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <.L1^B6>
 398:	00 c0       	rjmp	.+0      	; 0x39a <L0^A>

0000039a <L0^A>:
	...

0000039c <.LBE37>:
    for (uint8_t i = 0; i < 4; i++) {
 39c:	21 96       	adiw	r28, 0x01	; 1

0000039e <.Loc.174>:
 39e:	c4 30       	cpi	r28, 0x04	; 4
 3a0:	d1 05       	cpc	r29, r1
 3a2:	39 f7       	brne	.-50     	; 0x372 <.L36>

000003a4 <.Loc.175>:
        _delay_ms(1);
    }
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28

000003a8 <.Loc.176>:
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	08 95       	ret

000003b2 <display1_getal>:

void display1_getal(uint16_t waarde) {
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	c8 2f       	mov	r28, r24
 3c0:	d9 2f       	mov	r29, r25

000003c2 <.Loc.179>:
 3c2:	04 e0       	ldi	r16, 0x04	; 4
 3c4:	10 e0       	ldi	r17, 0x00	; 0

000003c6 <.LBB42>:
    for (uint8_t i = 0; i < 4; i++) {
        uint8_t cijfer = waarde % 10;
        waarde /= 10;
        uint8_t digit = ~(1 << (4 + i));  // bovenste display: digit 4-7
 3c6:	ee 24       	eor	r14, r14
 3c8:	e3 94       	inc	r14
 3ca:	f1 2c       	mov	r15, r1

000003cc <.L39>:
        uint8_t cijfer = waarde % 10;
 3cc:	9e 01       	movw	r18, r28
 3ce:	ad ec       	ldi	r26, 0xCD	; 205
 3d0:	bc ec       	ldi	r27, 0xCC	; 204
 3d2:	0e 94 44 06 	call	0xc88	; 0xc88 <__umulhisi3>
 3d6:	ac 01       	movw	r20, r24
 3d8:	56 95       	lsr	r21
 3da:	47 95       	ror	r20
 3dc:	56 95       	lsr	r21
 3de:	47 95       	ror	r20
 3e0:	56 95       	lsr	r21
 3e2:	47 95       	ror	r20
 3e4:	ca 01       	movw	r24, r20
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	84 0f       	add	r24, r20
 3f0:	95 1f       	adc	r25, r21
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	ae 01       	movw	r20, r28
 3f8:	48 1b       	sub	r20, r24
 3fa:	59 0b       	sbc	r21, r25

000003fc <.Loc.186>:
        waarde /= 10;
 3fc:	0e 94 44 06 	call	0xc88	; 0xc88 <__umulhisi3>
 400:	ec 01       	movw	r28, r24

00000402 <.Loc.188>:
 402:	d6 95       	lsr	r29
 404:	c7 95       	ror	r28
 406:	d6 95       	lsr	r29
 408:	c7 95       	ror	r28
 40a:	d6 95       	lsr	r29
 40c:	c7 95       	ror	r28

0000040e <.Loc.189>:
        uint8_t digit = ~(1 << (4 + i));  // bovenste display: digit 4-7
 40e:	b7 01       	movw	r22, r14
 410:	00 2e       	mov	r0, r16
 412:	02 c0       	rjmp	.+4      	; 0x418 <.L2^B4>

00000414 <.L1^B7>:
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23

00000418 <.L2^B4>:
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <.L1^B7>

0000041c <.Loc.192>:
 41c:	60 95       	com	r22

0000041e <.Loc.193>:
        display(segmentcodes[cijfer], digit);
 41e:	4e 5f       	subi	r20, 0xFE	; 254
 420:	5d 4f       	sbci	r21, 0xFD	; 253

00000422 <.Loc.194>:
 422:	fa 01       	movw	r30, r20
 424:	80 81       	ld	r24, Z
 426:	0e 94 1d 01 	call	0x23a	; 0x23a <display>

0000042a <.LBB43>:
 42a:	8f e9       	ldi	r24, 0x9F	; 159
 42c:	9f e0       	ldi	r25, 0x0F	; 15

0000042e <.L1^B8>:
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <.L1^B8>
 432:	00 c0       	rjmp	.+0      	; 0x434 <L0^A>

00000434 <L0^A>:
	...

00000436 <.LBE42>:
    for (uint8_t i = 0; i < 4; i++) {
 436:	0f 5f       	subi	r16, 0xFF	; 255
 438:	1f 4f       	sbci	r17, 0xFF	; 255

0000043a <.Loc.206>:
 43a:	08 30       	cpi	r16, 0x08	; 8
 43c:	11 05       	cpc	r17, r1
 43e:	31 f6       	brne	.-116    	; 0x3cc <.L39>

00000440 <.Loc.207>:
        _delay_ms(1);
    }
}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28

00000444 <.Loc.208>:
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16

00000448 <.Loc.209>:
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	08 95       	ret

0000044e <display2_getal>:

void display2_getal(uint16_t waarde) {
 44e:	ef 92       	push	r14
 450:	ff 92       	push	r15
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	c8 2f       	mov	r28, r24
 45c:	d9 2f       	mov	r29, r25

0000045e <.Loc.212>:
 45e:	00 e0       	ldi	r16, 0x00	; 0
 460:	10 e0       	ldi	r17, 0x00	; 0

00000462 <.LBB47>:
    for (uint8_t i = 0; i < 4; i++) {
        uint8_t cijfer = waarde % 10;
        waarde /= 10;
        uint8_t digit = ~(1 << i);  // onderste display: digit 0-3
 462:	ee 24       	eor	r14, r14
 464:	e3 94       	inc	r14
 466:	f1 2c       	mov	r15, r1

00000468 <.L42>:
        uint8_t cijfer = waarde % 10;
 468:	9e 01       	movw	r18, r28
 46a:	ad ec       	ldi	r26, 0xCD	; 205
 46c:	bc ec       	ldi	r27, 0xCC	; 204
 46e:	0e 94 44 06 	call	0xc88	; 0xc88 <__umulhisi3>
 472:	ac 01       	movw	r20, r24
 474:	56 95       	lsr	r21
 476:	47 95       	ror	r20
 478:	56 95       	lsr	r21
 47a:	47 95       	ror	r20
 47c:	56 95       	lsr	r21
 47e:	47 95       	ror	r20
 480:	ca 01       	movw	r24, r20
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	84 0f       	add	r24, r20
 48c:	95 1f       	adc	r25, r21
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	ae 01       	movw	r20, r28
 494:	48 1b       	sub	r20, r24
 496:	59 0b       	sbc	r21, r25

00000498 <.Loc.219>:
        waarde /= 10;
 498:	0e 94 44 06 	call	0xc88	; 0xc88 <__umulhisi3>
 49c:	ec 01       	movw	r28, r24

0000049e <.Loc.221>:
 49e:	d6 95       	lsr	r29
 4a0:	c7 95       	ror	r28
 4a2:	d6 95       	lsr	r29
 4a4:	c7 95       	ror	r28
 4a6:	d6 95       	lsr	r29
 4a8:	c7 95       	ror	r28

000004aa <.Loc.222>:
        uint8_t digit = ~(1 << i);  // onderste display: digit 0-3
 4aa:	b7 01       	movw	r22, r14
 4ac:	00 2e       	mov	r0, r16
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <.L2^B5>

000004b0 <.L1^B9>:
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23

000004b4 <.L2^B5>:
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <.L1^B9>

000004b8 <.Loc.225>:
 4b8:	60 95       	com	r22

000004ba <.Loc.226>:
        display(segmentcodes[cijfer], digit);
 4ba:	4e 5f       	subi	r20, 0xFE	; 254
 4bc:	5d 4f       	sbci	r21, 0xFD	; 253

000004be <.Loc.227>:
 4be:	fa 01       	movw	r30, r20
 4c0:	80 81       	ld	r24, Z
 4c2:	0e 94 1d 01 	call	0x23a	; 0x23a <display>

000004c6 <.LBB48>:
 4c6:	8f e9       	ldi	r24, 0x9F	; 159
 4c8:	9f e0       	ldi	r25, 0x0F	; 15

000004ca <.L1^B10>:
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <.L1^B10>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <L0^A>

000004d0 <L0^A>:
	...

000004d2 <.LBE47>:
    for (uint8_t i = 0; i < 4; i++) {
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255

000004d6 <.Loc.239>:
 4d6:	04 30       	cpi	r16, 0x04	; 4
 4d8:	11 05       	cpc	r17, r1
 4da:	31 f6       	brne	.-116    	; 0x468 <.L42>

000004dc <.Loc.240>:
        _delay_ms(1);
    }
}
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28

000004e0 <.Loc.241>:
 4e0:	1f 91       	pop	r17
 4e2:	0f 91       	pop	r16

000004e4 <.Loc.242>:
 4e4:	ff 90       	pop	r15
 4e6:	ef 90       	pop	r14
 4e8:	08 95       	ret

000004ea <init_interface>:
#include "interface_lib.h"


// Initialiseer de knoppen
void init_interface() {
    DDRD &= ~EMERGENCY_STOP_BUTTON;
 4ea:	52 98       	cbi	0x0a, 2	; 10

000004ec <.Loc.3>:
    PORTD |= EMERGENCY_STOP_BUTTON;
 4ec:	5a 9a       	sbi	0x0b, 2	; 11

000004ee <.Loc.5>:
}
 4ee:	08 95       	ret

000004f0 <button_pressed>:



// Verbeterde debounce voor knoppen
uint8_t button_pressed(uint8_t button_mask) {
 4f0:	98 2f       	mov	r25, r24

000004f2 <.Loc.10>:
    static uint8_t button_last_state = 0;
    uint8_t current_state = PINC & button_mask;
 4f2:	26 b1       	in	r18, 0x06	; 6

000004f4 <.Loc.11>:
 4f4:	28 23       	and	r18, r24

000004f6 <.Loc.12>:
    uint8_t pressed = 0;
 4f6:	80 e0       	ldi	r24, 0x00	; 0

000004f8 <.Loc.15>:

    if (!current_state && (button_last_state & button_mask)) {
 4f8:	21 11       	cpse	r18, r1
 4fa:	0c c0       	rjmp	.+24     	; 0x514 <.L3>

000004fc <.Loc.16>:
 4fc:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <button_last_state.0>
 500:	89 23       	and	r24, r25
 502:	88 23       	and	r24, r24
 504:	39 f0       	breq	.+14     	; 0x514 <.L3>

00000506 <.LBB4>:
 506:	ef e3       	ldi	r30, 0x3F	; 63
 508:	fc e9       	ldi	r31, 0x9C	; 156

0000050a <.L1^B1>:
 50a:	31 97       	sbiw	r30, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <.L1^B1>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <L0^A>

00000510 <L0^A>:
	...

00000512 <.LBE4>:
        _delay_ms(10); // Debounce
        pressed = 1;
 512:	81 e0       	ldi	r24, 0x01	; 1

00000514 <.L3>:
    }

    button_last_state = (button_last_state & ~button_mask) | (current_state & button_mask);
 514:	90 95       	com	r25

00000516 <.Loc.30>:
 516:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <button_last_state.0>
 51a:	93 23       	and	r25, r19

0000051c <.Loc.31>:
 51c:	92 2b       	or	r25, r18

0000051e <.Loc.32>:
 51e:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <button_last_state.0>

00000522 <.Loc.33>:
    return pressed;
}
 522:	08 95       	ret

00000524 <__vector_1>:
uint8_t laatst_sensor_1 = 0;
uint8_t laatst_sensor_2 = 0;



ISR(INT0_vect){
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25

00000528 <.Loc.1>:
    IR_sense_1 = 1;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <IR_sense_1+0x1>
 530:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <IR_sense_1>

00000534 <.Loc.3>:
   huidige_state = STATE_CHECK_BLOK;
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <huidige_state+0x1>
 53c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <huidige_state>

00000540 <.Loc.5>:
}
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	18 95       	reti

00000546 <__vector_2>:
ISR(INT1_vect){
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25

0000054a <.Loc.7>:
    IR_sense_2 = 1;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <IR_sense_2+0x1>
 552:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <IR_sense_2>

00000556 <.Loc.10>:
    huidige_state = STATE_CHECK_BLOK;
 556:	82 e0       	ldi	r24, 0x02	; 2
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <huidige_state+0x1>
 55e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <huidige_state>

00000562 <.Loc.11>:
}
 562:	9f 91       	pop	r25
 564:	8f 91       	pop	r24
 566:	18 95       	reti

00000568 <IR_init>:

void IR_init(){
    DDRD &= ~(IR_sense_pin_1 | IR_sense_pin_2);
 568:	8a b1       	in	r24, 0x0a	; 10
 56a:	8c 7f       	andi	r24, 0xFC	; 252
 56c:	8a b9       	out	0x0a, r24	; 10

0000056e <.Loc.15>:
    PORTD &= ~(IR_sense_pin_1 | IR_sense_pin_2);
 56e:	8b b1       	in	r24, 0x0b	; 11
 570:	8c 7f       	andi	r24, 0xFC	; 252
 572:	8b b9       	out	0x0b, r24	; 11

00000574 <.Loc.17>:



    EICRA = (1<<ISC01) | (1<<ISC00) | (1<<ISC11) | (1<<ISC10);
 574:	8f e0       	ldi	r24, 0x0F	; 15
 576:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>

0000057a <.Loc.19>:
    EIMSK = (1<<INT0) | (1<<INT1);
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	8d bb       	out	0x1d, r24	; 29

0000057e <.Loc.21>:

    sei();
 57e:	78 94       	sei

00000580 <.Loc.22>:
}
 580:	08 95       	ret

00000582 <IR_enable_interrupts>:
void IR_enable_interrupts() {
    EIMSK |= (1<<INT0) | (1<<INT1);
 582:	8d b3       	in	r24, 0x1d	; 29

00000584 <.Loc.25>:
 584:	83 60       	ori	r24, 0x03	; 3
 586:	8d bb       	out	0x1d, r24	; 29

00000588 <.Loc.26>:
}
 588:	08 95       	ret

0000058a <IR_disable_interrupts>:

void IR_disable_interrupts() {
    EIMSK |= (0<<INT0) | (0<<INT1);
 58a:	8d b3       	in	r24, 0x1d	; 29

0000058c <.Loc.29>:
 58c:	8d bb       	out	0x1d, r24	; 29

0000058e <.Loc.30>:
}
 58e:	08 95       	ret

00000590 <HALT_activate>:
// Voor het aansturen van de servo-acties in stappen
unsigned long vorige_tijd = 0;
uint8_t blok_check_substate = 0;

void HALT_activate(void){
    PORT_HALT |= (1<< HALT_PIN);
 590:	10 9a       	sbi	0x02, 0	; 2

00000592 <.Loc.3>:
}
 592:	08 95       	ret

00000594 <HALT_deactivate>:
void HALT_deactivate(void){
    PORT_HALT &= ~(1<< HALT_PIN);
 594:	10 98       	cbi	0x02, 0	; 2

00000596 <.Loc.7>:
}
 596:	08 95       	ret

00000598 <main>:
int main(void){
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	2e 97       	sbiw	r28, 0x0e	; 14
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61

000005a8 <.Loc.10>:

    DDR_HALT  |= (1 << HALT_PIN);
 5a8:	08 9a       	sbi	0x01, 0	; 1

000005aa <.Loc.11>:
    PORT_HALT &= ~(1<< HALT_PIN);
 5aa:	10 98       	cbi	0x02, 0	; 2

000005ac <.Loc.13>:
    init_display();
 5ac:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <init_display>

000005b0 <.LVL0>:
    IR_init();
 5b0:	0e 94 b4 02 	call	0x568	; 0x568 <IR_init>

000005b4 <.LVL1>:
    init_interface();
 5b4:	0e 94 75 02 	call	0x4ea	; 0x4ea <init_interface>

000005b8 <.LVL2>:
    timer0_init();
 5b8:	0e 94 cc 05 	call	0xb98	; 0xb98 <timer0_init>

000005bc <.LVL3>:
    IR_enable_interrupts();
 5bc:	0e 94 c1 02 	call	0x582	; 0x582 <IR_enable_interrupts>

000005c0 <.LVL4>:


    spi_device rfid_left = {&PORTB, PB0, &DDRB};
 5c0:	85 e0       	ldi	r24, 0x05	; 5
 5c2:	e2 e1       	ldi	r30, 0x12	; 18
 5c4:	f2 e0       	ldi	r31, 0x02	; 2
 5c6:	de 01       	movw	r26, r28
 5c8:	11 96       	adiw	r26, 0x01	; 1

000005ca <.L^B1>:
 5ca:	01 90       	ld	r0, Z+
 5cc:	0d 92       	st	X+, r0
 5ce:	8a 95       	dec	r24
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <.L^B1>

000005d2 <.Loc.20>:
    spi_device rfid_right = {&PORTL, PL0, &DDRL};
 5d2:	85 e0       	ldi	r24, 0x05	; 5
 5d4:	e7 e1       	ldi	r30, 0x17	; 23
 5d6:	f2 e0       	ldi	r31, 0x02	; 2
 5d8:	de 01       	movw	r26, r28
 5da:	16 96       	adiw	r26, 0x06	; 6

000005dc <.L^B2>:
 5dc:	01 90       	ld	r0, Z+
 5de:	0d 92       	st	X+, r0
 5e0:	8a 95       	dec	r24
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <.L^B2>

000005e4 <.Loc.22>:
    rfid_init(rfid_left);
 5e4:	49 81       	ldd	r20, Y+1	; 0x01
 5e6:	5a 81       	ldd	r21, Y+2	; 0x02
 5e8:	6b 81       	ldd	r22, Y+3	; 0x03
 5ea:	7c 81       	ldd	r23, Y+4	; 0x04
 5ec:	8d 81       	ldd	r24, Y+5	; 0x05
 5ee:	0e 94 77 04 	call	0x8ee	; 0x8ee <rfid_init>

000005f2 <.LVL7>:
    rfid_init(rfid_right);
 5f2:	4e 81       	ldd	r20, Y+6	; 0x06
 5f4:	5f 81       	ldd	r21, Y+7	; 0x07
 5f6:	68 85       	ldd	r22, Y+8	; 0x08
 5f8:	79 85       	ldd	r23, Y+9	; 0x09
 5fa:	8a 85       	ldd	r24, Y+10	; 0x0a
 5fc:	0e 94 77 04 	call	0x8ee	; 0x8ee <rfid_init>

00000600 <.LVL8>:
    *(rfid_left.port) |= (1 << rfid_left.pin);   // Deselecteer na init
 600:	28 9a       	sbi	0x05, 0	; 5

00000602 <.Loc.26>:
    *(rfid_right.port) |= (1 << rfid_right.pin); // Deselecteer na init
 602:	eb e0       	ldi	r30, 0x0B	; 11
 604:	f1 e0       	ldi	r31, 0x01	; 1
 606:	80 81       	ld	r24, Z

00000608 <.Loc.27>:
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	80 83       	st	Z, r24

0000060c <.Loc.28>:



    while (1) {
       if (PIND & EMERGENCY_STOP_BUTTON) {
          huidige_state = STATE_NOODSTOP;
 60c:	04 e0       	ldi	r16, 0x04	; 4
 60e:	10 e0       	ldi	r17, 0x00	; 0

00000610 <.Loc.29>:
                        blok_check_substate = 1;
                        break;

                    case 1:
                        if ((millis() - vorige_tijd) >= WACHT_TIJD_MS) {
                            if (rfid_tag_detected(rfid_right) || rfid_tag_detected(rfid_left)){
 610:	0f 2e       	mov	r0, r31
 612:	fb e0       	ldi	r31, 0x0B	; 11
 614:	bf 2e       	mov	r11, r31
 616:	f0 2d       	mov	r31, r0
 618:	cc 24       	eor	r12, r12
 61a:	c3 94       	inc	r12

0000061c <.Loc.30>:
                                blokjes_getelt += 1;
                            }
                            display1_getal(blokjes_getelt);
                            display2_getal(blokjes_getelt_TAG);
                            vorige_tijd = millis();
                            blok_check_substate = 2;
 61c:	68 94       	set
 61e:	aa 24       	eor	r10, r10
 620:	a1 f8       	bld	r10, 1

00000622 <.Loc.31>:
                        break;

                    case 2:
                        if ((millis() - vorige_tijd) >= WACHT_TIJD_MS) {
                            vorige_tijd = millis();
                            huidige_state = STATE_RIJDEN;
 622:	ee 24       	eor	r14, r14
 624:	e3 94       	inc	r14
 626:	f1 2c       	mov	r15, r1

00000628 <.Loc.32>:
                        blok_check_substate = 1;
 628:	dd 24       	eor	r13, r13
 62a:	d3 94       	inc	r13
 62c:	19 c0       	rjmp	.+50     	; 0x660 <.L4>

0000062e <.L5>:
                display1_getal(blokjes_getelt);
 62e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <blokjes_getelt>
 632:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <blokjes_getelt+0x1>
 636:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <display1_getal>

0000063a <.LVL9>:
                display2_getal(blokjes_getelt_TAG);
 63a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <blokjes_getelt_TAG>
 63e:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <blokjes_getelt_TAG+0x1>
 642:	0e 94 27 02 	call	0x44e	; 0x44e <display2_getal>

00000646 <.LVL10>:
        switch (huidige_state) {
 646:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <huidige_state>
 64a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <huidige_state+0x1>
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	91 05       	cpc	r25, r1
 652:	e1 f0       	breq	.+56     	; 0x68c <.L6>
 654:	84 30       	cpi	r24, 0x04	; 4
 656:	91 05       	cpc	r25, r1
 658:	09 f4       	brne	.+2      	; 0x65c <L0^A+0x2>

0000065a <L0^A>:
 65a:	c2 c0       	rjmp	.+388    	; 0x7e0 <.L7>
 65c:	01 97       	sbiw	r24, 0x01	; 1
 65e:	39 f0       	breq	.+14     	; 0x66e <.L14>

00000660 <.L4>:
       if (PIND & EMERGENCY_STOP_BUTTON) {
 660:	4a 9b       	sbis	0x09, 2	; 9
 662:	e5 cf       	rjmp	.-54     	; 0x62e <.L5>

00000664 <.Loc.39>:
          huidige_state = STATE_NOODSTOP;
 664:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <huidige_state+0x1>
 668:	00 93 00 02 	sts	0x0200, r16	; 0x800200 <huidige_state>
 66c:	e0 cf       	rjmp	.-64     	; 0x62e <.L5>

0000066e <.L14>:
                HALT_deactivate();
 66e:	0e 94 ca 02 	call	0x594	; 0x594 <HALT_deactivate>

00000672 <.LVL11>:
                display1_getal(blokjes_getelt);
 672:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <blokjes_getelt>
 676:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <blokjes_getelt+0x1>
 67a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <display1_getal>

0000067e <.LVL12>:
                display2_getal(blokjes_getelt_TAG);
 67e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <blokjes_getelt_TAG>
 682:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <blokjes_getelt_TAG+0x1>
 686:	0e 94 27 02 	call	0x44e	; 0x44e <display2_getal>

0000068a <.LVL13>:
                break;
 68a:	ea cf       	rjmp	.-44     	; 0x660 <.L4>

0000068c <.L6>:
               HALT_activate();
 68c:	0e 94 c8 02 	call	0x590	; 0x590 <HALT_activate>

00000690 <.LVL14>:
                switch(blok_check_substate) {
 690:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <blok_check_substate>
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	91 f0       	breq	.+36     	; 0x6bc <.L9>
 698:	82 30       	cpi	r24, 0x02	; 2
 69a:	09 f4       	brne	.+2      	; 0x69e <L0^A+0x2>

0000069c <L0^A>:
 69c:	72 c0       	rjmp	.+228    	; 0x782 <.L10>
 69e:	81 11       	cpse	r24, r1
 6a0:	df cf       	rjmp	.-66     	; 0x660 <.L4>

000006a2 <.Loc.47>:
                        vorige_tijd = millis();
 6a2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <millis>

000006a6 <.LVL15>:
 6a6:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <vorige_tijd>
 6aa:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <vorige_tijd+0x1>
 6ae:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <vorige_tijd+0x2>
 6b2:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <vorige_tijd+0x3>

000006b6 <.Loc.49>:
                        blok_check_substate = 1;
 6b6:	d0 92 23 02 	sts	0x0223, r13	; 0x800223 <blok_check_substate>

000006ba <.Loc.51>:
                        break;
 6ba:	d2 cf       	rjmp	.-92     	; 0x660 <.L4>

000006bc <.L9>:
                        if ((millis() - vorige_tijd) >= WACHT_TIJD_MS) {
 6bc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <millis>

000006c0 <.LVL16>:
 6c0:	6b 87       	std	Y+11, r22	; 0x0b
 6c2:	7c 87       	std	Y+12, r23	; 0x0c
 6c4:	8d 87       	std	Y+13, r24	; 0x0d
 6c6:	9e 87       	std	Y+14, r25	; 0x0e

000006c8 <.Loc.54>:
 6c8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <vorige_tijd>
 6cc:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <vorige_tijd+0x1>
 6d0:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <vorige_tijd+0x2>
 6d4:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <vorige_tijd+0x3>
 6d8:	2b 85       	ldd	r18, Y+11	; 0x0b
 6da:	3c 85       	ldd	r19, Y+12	; 0x0c
 6dc:	4d 85       	ldd	r20, Y+13	; 0x0d
 6de:	5e 85       	ldd	r21, Y+14	; 0x0e
 6e0:	28 1b       	sub	r18, r24
 6e2:	39 0b       	sbc	r19, r25
 6e4:	4a 0b       	sbc	r20, r26
 6e6:	5b 0b       	sbc	r21, r27
 6e8:	da 01       	movw	r26, r20
 6ea:	c9 01       	movw	r24, r18

000006ec <.Loc.55>:
 6ec:	84 3f       	cpi	r24, 0xF4	; 244
 6ee:	91 40       	sbci	r25, 0x01	; 1
 6f0:	a1 05       	cpc	r26, r1
 6f2:	b1 05       	cpc	r27, r1
 6f4:	08 f4       	brcc	.+2      	; 0x6f8 <.Loc.56>

000006f6 <L0^A>:
 6f6:	b4 cf       	rjmp	.-152    	; 0x660 <.L4>

000006f8 <.Loc.56>:
                            if (rfid_tag_detected(rfid_right) || rfid_tag_detected(rfid_left)){
 6f8:	4b 2d       	mov	r20, r11
 6fa:	5c 2d       	mov	r21, r12
 6fc:	be 82       	std	Y+6, r11	; 0x06
 6fe:	cf 82       	std	Y+7, r12	; 0x07
 700:	18 86       	std	Y+8, r1	; 0x08
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	79 85       	ldd	r23, Y+9	; 0x09
 706:	8a 85       	ldd	r24, Y+10	; 0x0a
 708:	0e 94 9d 05 	call	0xb3a	; 0xb3a <rfid_tag_detected>

0000070c <.LVL17>:
 70c:	88 23       	and	r24, r24
 70e:	11 f1       	breq	.+68     	; 0x754 <.L15>

00000710 <.L11>:
                                blokjes_getelt_TAG += 1;
 710:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <blokjes_getelt_TAG>
 714:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <blokjes_getelt_TAG+0x1>
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <blokjes_getelt_TAG+0x1>
 71e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <blokjes_getelt_TAG>

00000722 <.L13>:
                            display1_getal(blokjes_getelt);
 722:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <blokjes_getelt>
 726:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <blokjes_getelt+0x1>
 72a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <display1_getal>

0000072e <.LVL18>:
                            display2_getal(blokjes_getelt_TAG);
 72e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <blokjes_getelt_TAG>
 732:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <blokjes_getelt_TAG+0x1>
 736:	0e 94 27 02 	call	0x44e	; 0x44e <display2_getal>

0000073a <.LVL19>:
                            vorige_tijd = millis();
 73a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <millis>

0000073e <.LVL20>:
 73e:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <vorige_tijd>
 742:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <vorige_tijd+0x1>
 746:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <vorige_tijd+0x2>
 74a:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <vorige_tijd+0x3>

0000074e <.Loc.65>:
                            blok_check_substate = 2;
 74e:	a0 92 23 02 	sts	0x0223, r10	; 0x800223 <blok_check_substate>
 752:	86 cf       	rjmp	.-244    	; 0x660 <.L4>

00000754 <.L15>:
                            if (rfid_tag_detected(rfid_right) || rfid_tag_detected(rfid_left)){
 754:	85 e2       	ldi	r24, 0x25	; 37
 756:	48 2f       	mov	r20, r24
 758:	89 83       	std	Y+1, r24	; 0x01
 75a:	1a 82       	std	Y+2, r1	; 0x02
 75c:	1b 82       	std	Y+3, r1	; 0x03
 75e:	50 e0       	ldi	r21, 0x00	; 0
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	7c 81       	ldd	r23, Y+4	; 0x04
 764:	8d 81       	ldd	r24, Y+5	; 0x05
 766:	0e 94 9d 05 	call	0xb3a	; 0xb3a <rfid_tag_detected>

0000076a <.LVL21>:
 76a:	81 11       	cpse	r24, r1
 76c:	d1 cf       	rjmp	.-94     	; 0x710 <.L11>

0000076e <.Loc.69>:
                                blokjes_getelt += 1;
 76e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <blokjes_getelt>
 772:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <blokjes_getelt+0x1>
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <blokjes_getelt+0x1>
 77c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <blokjes_getelt>
 780:	d0 cf       	rjmp	.-96     	; 0x722 <.L13>

00000782 <.L10>:
                        if ((millis() - vorige_tijd) >= WACHT_TIJD_MS) {
 782:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <millis>

00000786 <.LVL22>:
 786:	6b 87       	std	Y+11, r22	; 0x0b
 788:	7c 87       	std	Y+12, r23	; 0x0c
 78a:	8d 87       	std	Y+13, r24	; 0x0d
 78c:	9e 87       	std	Y+14, r25	; 0x0e

0000078e <.Loc.73>:
 78e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <vorige_tijd>
 792:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <vorige_tijd+0x1>
 796:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <vorige_tijd+0x2>
 79a:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <vorige_tijd+0x3>
 79e:	2b 85       	ldd	r18, Y+11	; 0x0b
 7a0:	3c 85       	ldd	r19, Y+12	; 0x0c
 7a2:	4d 85       	ldd	r20, Y+13	; 0x0d
 7a4:	5e 85       	ldd	r21, Y+14	; 0x0e
 7a6:	28 1b       	sub	r18, r24
 7a8:	39 0b       	sbc	r19, r25
 7aa:	4a 0b       	sbc	r20, r26
 7ac:	5b 0b       	sbc	r21, r27
 7ae:	da 01       	movw	r26, r20
 7b0:	c9 01       	movw	r24, r18

000007b2 <.Loc.74>:
 7b2:	84 3f       	cpi	r24, 0xF4	; 244
 7b4:	91 40       	sbci	r25, 0x01	; 1
 7b6:	a1 05       	cpc	r26, r1
 7b8:	b1 05       	cpc	r27, r1
 7ba:	08 f4       	brcc	.+2      	; 0x7be <.Loc.75>

000007bc <L0^A>:
 7bc:	51 cf       	rjmp	.-350    	; 0x660 <.L4>

000007be <.Loc.75>:
                            vorige_tijd = millis();
 7be:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <millis>

000007c2 <.LVL23>:
 7c2:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <vorige_tijd>
 7c6:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <vorige_tijd+0x1>
 7ca:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <vorige_tijd+0x2>
 7ce:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <vorige_tijd+0x3>

000007d2 <.Loc.77>:
                            huidige_state = STATE_RIJDEN;
 7d2:	f0 92 01 02 	sts	0x0201, r15	; 0x800201 <huidige_state+0x1>
 7d6:	e0 92 00 02 	sts	0x0200, r14	; 0x800200 <huidige_state>

000007da <.Loc.79>:
                            blok_check_substate = 0;
 7da:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <blok_check_substate>
 7de:	40 cf       	rjmp	.-384    	; 0x660 <.L4>

000007e0 <.L7>:

                break;


            case STATE_NOODSTOP:
                if (PIND & EMERGENCY_STOP_BUTTON) {
 7e0:	4a 9b       	sbis	0x09, 2	; 9
 7e2:	3e cf       	rjmp	.-388    	; 0x660 <.L4>

000007e4 <.Loc.83>:
                    huidige_state = STATE_STARTUP;
 7e4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <huidige_state+0x1>
 7e8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <huidige_state>
 7ec:	39 cf       	rjmp	.-398    	; 0x660 <.L4>

000007ee <spi_init>:
#define MFRC522_TXASK_REG 0x15

#define PICC_CMD_REQA 0x26

void spi_init() {
    DDRB |= (1 << PB2) | (1 << PB1) | (1 << PB0); // MOSI (D51), SCK (D52), SS (D53)
 7ee:	84 b1       	in	r24, 0x04	; 4

000007f0 <.Loc.2>:
 7f0:	87 60       	ori	r24, 0x07	; 7
 7f2:	84 b9       	out	0x04, r24	; 4

000007f4 <.Loc.3>:
    DDRB &= ~(1 << PB3); // MISO (D50) als input
 7f4:	23 98       	cbi	0x04, 3	; 4

000007f6 <.Loc.5>:
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // SPI Enable, Master mode, clk/16
 7f6:	81 e5       	ldi	r24, 0x51	; 81
 7f8:	8c bd       	out	0x2c, r24	; 44

000007fa <.Loc.7>:
}
 7fa:	08 95       	ret

000007fc <spi_transfer>:

uint8_t spi_transfer(uint8_t data) {
    SPDR = data;
 7fc:	8e bd       	out	0x2e, r24	; 46

000007fe <.L3>:
    while (!(SPSR & (1 << SPIF)));
 7fe:	0d b4       	in	r0, 0x2d	; 45
 800:	07 fe       	sbrs	r0, 7
 802:	fd cf       	rjmp	.-6      	; 0x7fe <.L3>

00000804 <.Loc.13>:
    return SPDR;
 804:	8e b5       	in	r24, 0x2e	; 46

00000806 <.Loc.15>:
}
 806:	08 95       	ret

00000808 <read_register>:
    spi_transfer((reg << 1) & 0x7E);
    spi_transfer(val);
    *(dev.port) |= (1 << dev.pin);      // Slave deselect
}

static uint8_t read_register(spi_device dev, uint8_t reg) {
 808:	ef 92       	push	r14
 80a:	ff 92       	push	r15
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	00 d0       	rcall	.+0      	; 0x816 <L0^A>

00000816 <L0^A>:
 816:	0f 92       	push	r0
 818:	0f 92       	push	r0
 81a:	cd b7       	in	r28, 0x3d	; 61
 81c:	de b7       	in	r29, 0x3e	; 62
 81e:	49 83       	std	Y+1, r20	; 0x01
 820:	5a 83       	std	Y+2, r21	; 0x02
 822:	6b 83       	std	Y+3, r22	; 0x03
 824:	7c 83       	std	Y+4, r23	; 0x04
 826:	8d 83       	std	Y+5, r24	; 0x05
 828:	82 2f       	mov	r24, r18
 82a:	09 81       	ldd	r16, Y+1	; 0x01
 82c:	1a 81       	ldd	r17, Y+2	; 0x02

0000082e <.Loc.18>:
    uint8_t val;
    *(dev.port) &= ~(1 << dev.pin);     // Slave select
 82e:	f8 01       	movw	r30, r16
 830:	40 81       	ld	r20, Z

00000832 <.Loc.20>:
 832:	21 e0       	ldi	r18, 0x01	; 1
 834:	30 e0       	ldi	r19, 0x00	; 0

00000836 <.Loc.21>:
 836:	79 01       	movw	r14, r18
 838:	02 c0       	rjmp	.+4      	; 0x83e <.L2^B1>

0000083a <.L1^B1>:
 83a:	ee 0c       	add	r14, r14
 83c:	ff 1c       	adc	r15, r15

0000083e <.L2^B1>:
 83e:	6a 95       	dec	r22
 840:	e2 f7       	brpl	.-8      	; 0x83a <.L1^B1>

00000842 <.Loc.22>:
 842:	9e 2d       	mov	r25, r14
 844:	90 95       	com	r25
 846:	94 23       	and	r25, r20
 848:	90 83       	st	Z, r25

0000084a <.Loc.23>:
    spi_transfer(((reg << 1) & 0x7E) | 0x80);
 84a:	88 0f       	add	r24, r24

0000084c <.Loc.25>:
 84c:	8e 77       	andi	r24, 0x7E	; 126

0000084e <.Loc.26>:
 84e:	80 68       	ori	r24, 0x80	; 128
 850:	0e 94 fe 03 	call	0x7fc	; 0x7fc <spi_transfer>

00000854 <.LVL6>:
    val = spi_transfer(0);
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	0e 94 fe 03 	call	0x7fc	; 0x7fc <spi_transfer>

0000085a <.LVL7>:
    *(dev.port) |= (1 << dev.pin);      // Slave deselect
 85a:	f8 01       	movw	r30, r16
 85c:	90 81       	ld	r25, Z

0000085e <.Loc.30>:
 85e:	9e 29       	or	r25, r14
 860:	90 83       	st	Z, r25

00000862 <.Loc.31>:
    return val;
}
 862:	0f 90       	pop	r0
 864:	0f 90       	pop	r0
 866:	0f 90       	pop	r0
 868:	0f 90       	pop	r0
 86a:	0f 90       	pop	r0
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	0f 91       	pop	r16

00000874 <.Loc.33>:
 874:	ff 90       	pop	r15
 876:	ef 90       	pop	r14
 878:	08 95       	ret

0000087a <write_register>:
static void write_register(spi_device dev, uint8_t reg, uint8_t val) {
 87a:	cf 92       	push	r12
 87c:	df 92       	push	r13
 87e:	ef 92       	push	r14
 880:	ff 92       	push	r15
 882:	0f 93       	push	r16
 884:	cf 93       	push	r28
 886:	df 93       	push	r29
 888:	00 d0       	rcall	.+0      	; 0x88a <L0^A>

0000088a <L0^A>:
 88a:	0f 92       	push	r0
 88c:	0f 92       	push	r0
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
 892:	49 83       	std	Y+1, r20	; 0x01
 894:	5a 83       	std	Y+2, r21	; 0x02
 896:	6b 83       	std	Y+3, r22	; 0x03
 898:	7c 83       	std	Y+4, r23	; 0x04
 89a:	8d 83       	std	Y+5, r24	; 0x05
 89c:	e9 80       	ldd	r14, Y+1	; 0x01
 89e:	fa 80       	ldd	r15, Y+2	; 0x02

000008a0 <.Loc.36>:
    *(dev.port) &= ~(1 << dev.pin);     // Slave select
 8a0:	f7 01       	movw	r30, r14
 8a2:	90 81       	ld	r25, Z

000008a4 <.Loc.37>:
 8a4:	41 e0       	ldi	r20, 0x01	; 1
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	6a 01       	movw	r12, r20
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <.L2^B2>

000008ac <.L1^B2>:
 8ac:	cc 0c       	add	r12, r12
 8ae:	dd 1c       	adc	r13, r13

000008b0 <.L2^B2>:
 8b0:	6a 95       	dec	r22
 8b2:	e2 f7       	brpl	.-8      	; 0x8ac <.L1^B2>

000008b4 <.Loc.38>:
 8b4:	8c 2d       	mov	r24, r12
 8b6:	80 95       	com	r24
 8b8:	89 23       	and	r24, r25
 8ba:	80 83       	st	Z, r24

000008bc <.Loc.39>:
    spi_transfer((reg << 1) & 0x7E);
 8bc:	82 2f       	mov	r24, r18
 8be:	88 0f       	add	r24, r24

000008c0 <.Loc.41>:
 8c0:	8e 77       	andi	r24, 0x7E	; 126
 8c2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <spi_transfer>

000008c6 <.LVL11>:
    spi_transfer(val);
 8c6:	80 2f       	mov	r24, r16
 8c8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <spi_transfer>

000008cc <.LVL12>:
    *(dev.port) |= (1 << dev.pin);      // Slave deselect
 8cc:	f7 01       	movw	r30, r14
 8ce:	80 81       	ld	r24, Z

000008d0 <.Loc.44>:
 8d0:	8c 29       	or	r24, r12
 8d2:	80 83       	st	Z, r24

000008d4 <.Loc.45>:
}
 8d4:	0f 90       	pop	r0
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	0f 90       	pop	r0
 8dc:	0f 90       	pop	r0
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	0f 91       	pop	r16

000008e4 <.Loc.46>:
 8e4:	ff 90       	pop	r15
 8e6:	ef 90       	pop	r14

000008e8 <.Loc.47>:
 8e8:	df 90       	pop	r13
 8ea:	cf 90       	pop	r12
 8ec:	08 95       	ret

000008ee <rfid_init>:

void rfid_init(spi_device dev) {
 8ee:	af 92       	push	r10
 8f0:	bf 92       	push	r11
 8f2:	df 92       	push	r13
 8f4:	ef 92       	push	r14
 8f6:	ff 92       	push	r15
 8f8:	0f 93       	push	r16
 8fa:	1f 93       	push	r17
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	00 d0       	rcall	.+0      	; 0x902 <L0^A>

00000902 <L0^A>:
 902:	0f 92       	push	r0
 904:	0f 92       	push	r0
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	49 83       	std	Y+1, r20	; 0x01
 90c:	5a 83       	std	Y+2, r21	; 0x02
 90e:	d6 2e       	mov	r13, r22
 910:	6b 83       	std	Y+3, r22	; 0x03
 912:	7c 83       	std	Y+4, r23	; 0x04
 914:	8d 83       	std	Y+5, r24	; 0x05
 916:	09 81       	ldd	r16, Y+1	; 0x01
 918:	1a 81       	ldd	r17, Y+2	; 0x02

0000091a <.Loc.49>:
 91a:	ec 80       	ldd	r14, Y+4	; 0x04
 91c:	fd 80       	ldd	r15, Y+5	; 0x05

0000091e <.Loc.50>:
    *(dev.ddr) |= (1 << dev.pin);   // SS output
 91e:	f7 01       	movw	r30, r14
 920:	20 81       	ld	r18, Z

00000922 <.Loc.51>:
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	02 c0       	rjmp	.+4      	; 0x92c <.L2^B3>

00000928 <.L1^B3>:
 928:	88 0f       	add	r24, r24
 92a:	99 1f       	adc	r25, r25

0000092c <.L2^B3>:
 92c:	6a 95       	dec	r22
 92e:	e2 f7       	brpl	.-8      	; 0x928 <.L1^B3>

00000930 <.Loc.52>:
 930:	92 2f       	mov	r25, r18
 932:	98 2b       	or	r25, r24
 934:	90 83       	st	Z, r25

00000936 <.Loc.53>:
    RST_DDR |= (1 << RST_PIN);         // Reset output
 936:	ea e0       	ldi	r30, 0x0A	; 10
 938:	f1 e0       	ldi	r31, 0x01	; 1
 93a:	90 81       	ld	r25, Z

0000093c <.Loc.54>:
 93c:	92 60       	ori	r25, 0x02	; 2
 93e:	90 83       	st	Z, r25

00000940 <.Loc.55>:
    *(dev.port) |= (1 << dev.pin);  // Deselect slave
 940:	f8 01       	movw	r30, r16
 942:	90 81       	ld	r25, Z

00000944 <.Loc.56>:
 944:	89 2b       	or	r24, r25
 946:	80 83       	st	Z, r24

00000948 <.Loc.57>:
    RST_PORT |= (1 << RST_PIN);        // Startup
 948:	0f 2e       	mov	r0, r31
 94a:	fb e0       	ldi	r31, 0x0B	; 11
 94c:	af 2e       	mov	r10, r31
 94e:	bb 24       	eor	r11, r11
 950:	b3 94       	inc	r11
 952:	f0 2d       	mov	r31, r0
 954:	f5 01       	movw	r30, r10
 956:	80 81       	ld	r24, Z

00000958 <.Loc.58>:
 958:	82 60       	ori	r24, 0x02	; 2
 95a:	80 83       	st	Z, r24

0000095c <.Loc.59>:

    spi_init();
 95c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <spi_init>

00000960 <.LVL17>:

    RST_PORT &= ~(1<<RST_PIN);         // Hard reset
 960:	f5 01       	movw	r30, r10
 962:	80 81       	ld	r24, Z
 964:	8d 7f       	andi	r24, 0xFD	; 253
 966:	80 83       	st	Z, r24

00000968 <.Loc.62>:
    RST_PORT |= (1 << RST_PIN);        // Startup
 968:	80 81       	ld	r24, Z

0000096a <.Loc.63>:
 96a:	82 60       	ori	r24, 0x02	; 2
 96c:	80 83       	st	Z, r24

0000096e <.L8>:

    while(read_register(dev, 0x37) != 0x92); // Check version to see if reset is complete
 96e:	40 2f       	mov	r20, r16
 970:	51 2f       	mov	r21, r17
 972:	1a 83       	std	Y+2, r17	; 0x02
 974:	09 83       	std	Y+1, r16	; 0x01
 976:	db 82       	std	Y+3, r13	; 0x03
 978:	7e 2d       	mov	r23, r14
 97a:	fd 82       	std	Y+5, r15	; 0x05
 97c:	ec 82       	std	Y+4, r14	; 0x04
 97e:	27 e3       	ldi	r18, 0x37	; 55
 980:	6d 2d       	mov	r22, r13
 982:	8f 2d       	mov	r24, r15
 984:	0e 94 04 04 	call	0x808	; 0x808 <read_register>

00000988 <.LVL18>:
 988:	82 39       	cpi	r24, 0x92	; 146
 98a:	89 f7       	brne	.-30     	; 0x96e <.L8>

0000098c <.Loc.68>:
    write_register(dev, 0x26, 0x70); // Max gain
 98c:	00 e7       	ldi	r16, 0x70	; 112

0000098e <.Loc.69>:
 98e:	26 e2       	ldi	r18, 0x26	; 38
 990:	49 81       	ldd	r20, Y+1	; 0x01
 992:	5a 81       	ldd	r21, Y+2	; 0x02
 994:	6b 81       	ldd	r22, Y+3	; 0x03
 996:	7c 81       	ldd	r23, Y+4	; 0x04
 998:	8d 81       	ldd	r24, Y+5	; 0x05
 99a:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

0000099e <.LVL20>:
    write_register(dev, MFRC522_TMODE_REG, 0x80);
 99e:	00 e8       	ldi	r16, 0x80	; 128
 9a0:	2a e2       	ldi	r18, 0x2A	; 42
 9a2:	49 81       	ldd	r20, Y+1	; 0x01
 9a4:	5a 81       	ldd	r21, Y+2	; 0x02
 9a6:	6b 81       	ldd	r22, Y+3	; 0x03
 9a8:	7c 81       	ldd	r23, Y+4	; 0x04
 9aa:	8d 81       	ldd	r24, Y+5	; 0x05
 9ac:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

000009b0 <.LVL21>:
    write_register(dev, MFRC522_TPRESCALER_REG, 0xA9);
 9b0:	09 ea       	ldi	r16, 0xA9	; 169
 9b2:	2b e2       	ldi	r18, 0x2B	; 43
 9b4:	49 81       	ldd	r20, Y+1	; 0x01
 9b6:	5a 81       	ldd	r21, Y+2	; 0x02
 9b8:	6b 81       	ldd	r22, Y+3	; 0x03
 9ba:	7c 81       	ldd	r23, Y+4	; 0x04
 9bc:	8d 81       	ldd	r24, Y+5	; 0x05
 9be:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

000009c2 <.LVL22>:
    write_register(dev, MFRC522_TRELOAD_REG_L, 0xE8);
 9c2:	08 ee       	ldi	r16, 0xE8	; 232
 9c4:	2d e2       	ldi	r18, 0x2D	; 45
 9c6:	49 81       	ldd	r20, Y+1	; 0x01
 9c8:	5a 81       	ldd	r21, Y+2	; 0x02
 9ca:	6b 81       	ldd	r22, Y+3	; 0x03
 9cc:	7c 81       	ldd	r23, Y+4	; 0x04
 9ce:	8d 81       	ldd	r24, Y+5	; 0x05
 9d0:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

000009d4 <.LVL23>:
    write_register(dev, MFRC522_TRELOAD_REG_H, 0x03);
 9d4:	03 e0       	ldi	r16, 0x03	; 3
 9d6:	2c e2       	ldi	r18, 0x2C	; 44
 9d8:	49 81       	ldd	r20, Y+1	; 0x01
 9da:	5a 81       	ldd	r21, Y+2	; 0x02
 9dc:	6b 81       	ldd	r22, Y+3	; 0x03
 9de:	7c 81       	ldd	r23, Y+4	; 0x04
 9e0:	8d 81       	ldd	r24, Y+5	; 0x05
 9e2:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

000009e6 <.LVL24>:
    write_register(dev, MFRC522_TXASK_REG, 0x40);
 9e6:	00 e4       	ldi	r16, 0x40	; 64
 9e8:	25 e1       	ldi	r18, 0x15	; 21
 9ea:	49 81       	ldd	r20, Y+1	; 0x01
 9ec:	5a 81       	ldd	r21, Y+2	; 0x02
 9ee:	6b 81       	ldd	r22, Y+3	; 0x03
 9f0:	7c 81       	ldd	r23, Y+4	; 0x04
 9f2:	8d 81       	ldd	r24, Y+5	; 0x05
 9f4:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

000009f8 <.LVL25>:
    write_register(dev, MFRC522_MODE_REG, 0x3D);
 9f8:	0d e3       	ldi	r16, 0x3D	; 61
 9fa:	21 e1       	ldi	r18, 0x11	; 17
 9fc:	49 81       	ldd	r20, Y+1	; 0x01
 9fe:	5a 81       	ldd	r21, Y+2	; 0x02
 a00:	6b 81       	ldd	r22, Y+3	; 0x03
 a02:	7c 81       	ldd	r23, Y+4	; 0x04
 a04:	8d 81       	ldd	r24, Y+5	; 0x05
 a06:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

00000a0a <.LVL26>:

    uint8_t val = read_register(dev, MFRC522_TX_CONTROL_REG);
 a0a:	24 e1       	ldi	r18, 0x14	; 20
 a0c:	49 81       	ldd	r20, Y+1	; 0x01
 a0e:	5a 81       	ldd	r21, Y+2	; 0x02
 a10:	6b 81       	ldd	r22, Y+3	; 0x03
 a12:	7c 81       	ldd	r23, Y+4	; 0x04
 a14:	8d 81       	ldd	r24, Y+5	; 0x05
 a16:	0e 94 04 04 	call	0x808	; 0x808 <read_register>

00000a1a <.LVL27>:
    if (!(val & 0x03)) {
 a1a:	98 2f       	mov	r25, r24
 a1c:	93 70       	andi	r25, 0x03	; 3
 a1e:	99 23       	and	r25, r25
 a20:	79 f0       	breq	.+30     	; 0xa40 <.L11>

00000a22 <.L7>:
        write_register(dev, MFRC522_TX_CONTROL_REG, val | 0x03);
    }


}
 a22:	0f 90       	pop	r0
 a24:	0f 90       	pop	r0
 a26:	0f 90       	pop	r0
 a28:	0f 90       	pop	r0
 a2a:	0f 90       	pop	r0
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	1f 91       	pop	r17
 a32:	0f 91       	pop	r16
 a34:	ff 90       	pop	r15
 a36:	ef 90       	pop	r14

00000a38 <.Loc.81>:
 a38:	df 90       	pop	r13

00000a3a <.Loc.82>:
 a3a:	bf 90       	pop	r11
 a3c:	af 90       	pop	r10
 a3e:	08 95       	ret

00000a40 <.L11>:
        write_register(dev, MFRC522_TX_CONTROL_REG, val | 0x03);
 a40:	08 2f       	mov	r16, r24
 a42:	03 60       	ori	r16, 0x03	; 3
 a44:	24 e1       	ldi	r18, 0x14	; 20
 a46:	49 81       	ldd	r20, Y+1	; 0x01
 a48:	5a 81       	ldd	r21, Y+2	; 0x02
 a4a:	6b 81       	ldd	r22, Y+3	; 0x03
 a4c:	7c 81       	ldd	r23, Y+4	; 0x04
 a4e:	8d 81       	ldd	r24, Y+5	; 0x05

00000a50 <.Loc.84>:
 a50:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

00000a54 <.LVL33>:
}
 a54:	e6 cf       	rjmp	.-52     	; 0xa22 <.L7>

00000a56 <rfid_check_tag_present>:

bool rfid_check_tag_present(spi_device dev) {
 a56:	0f 93       	push	r16
 a58:	1f 93       	push	r17
 a5a:	cf 93       	push	r28
 a5c:	df 93       	push	r29
 a5e:	00 d0       	rcall	.+0      	; 0xa60 <L0^A>

00000a60 <L0^A>:
 a60:	0f 92       	push	r0
 a62:	0f 92       	push	r0
 a64:	cd b7       	in	r28, 0x3d	; 61
 a66:	de b7       	in	r29, 0x3e	; 62
 a68:	49 83       	std	Y+1, r20	; 0x01
 a6a:	5a 83       	std	Y+2, r21	; 0x02
 a6c:	6b 83       	std	Y+3, r22	; 0x03
 a6e:	7c 83       	std	Y+4, r23	; 0x04
 a70:	8d 83       	std	Y+5, r24	; 0x05

00000a72 <.Loc.87>:
    write_register(dev, MFRC522_BIT_FRAMING_REG, 0x07); // Set bitframing to 7 bits
 a72:	07 e0       	ldi	r16, 0x07	; 7
 a74:	2d e0       	ldi	r18, 0x0D	; 13
 a76:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

00000a7a <.LVL34>:
    write_register(dev, MFRC522_COMMAND_REG, 0x00); // Set to idle
 a7a:	00 e0       	ldi	r16, 0x00	; 0
 a7c:	21 e0       	ldi	r18, 0x01	; 1
 a7e:	49 81       	ldd	r20, Y+1	; 0x01
 a80:	5a 81       	ldd	r21, Y+2	; 0x02
 a82:	6b 81       	ldd	r22, Y+3	; 0x03
 a84:	7c 81       	ldd	r23, Y+4	; 0x04
 a86:	8d 81       	ldd	r24, Y+5	; 0x05
 a88:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

00000a8c <.LVL35>:
    write_register(dev, MFRC522_FIFO_DATA_REG, PICC_CMD_REQA); // Reqa command
 a8c:	06 e2       	ldi	r16, 0x26	; 38
 a8e:	29 e0       	ldi	r18, 0x09	; 9
 a90:	49 81       	ldd	r20, Y+1	; 0x01
 a92:	5a 81       	ldd	r21, Y+2	; 0x02
 a94:	6b 81       	ldd	r22, Y+3	; 0x03
 a96:	7c 81       	ldd	r23, Y+4	; 0x04
 a98:	8d 81       	ldd	r24, Y+5	; 0x05
 a9a:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

00000a9e <.LVL36>:
    write_register(dev, MFRC522_COMMAND_REG, MFRC522_COMMAND_TRANSCEIVE); // Transceive
 a9e:	0c e0       	ldi	r16, 0x0C	; 12
 aa0:	21 e0       	ldi	r18, 0x01	; 1
 aa2:	49 81       	ldd	r20, Y+1	; 0x01
 aa4:	5a 81       	ldd	r21, Y+2	; 0x02
 aa6:	6b 81       	ldd	r22, Y+3	; 0x03
 aa8:	7c 81       	ldd	r23, Y+4	; 0x04
 aaa:	8d 81       	ldd	r24, Y+5	; 0x05
 aac:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

00000ab0 <.LVL37>:
    write_register(dev, MFRC522_BIT_FRAMING_REG, 0x87);
 ab0:	07 e8       	ldi	r16, 0x87	; 135
 ab2:	2d e0       	ldi	r18, 0x0D	; 13
 ab4:	49 81       	ldd	r20, Y+1	; 0x01
 ab6:	5a 81       	ldd	r21, Y+2	; 0x02
 ab8:	6b 81       	ldd	r22, Y+3	; 0x03
 aba:	7c 81       	ldd	r23, Y+4	; 0x04
 abc:	8d 81       	ldd	r24, Y+5	; 0x05
 abe:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

00000ac2 <.LVL38>:
 ac2:	18 ec       	ldi	r17, 0xC8	; 200

00000ac4 <.L14>:

    uint8_t i = 0;
    for (i = 0; i < 200; i++) {
        uint8_t irq = read_register(dev, MFRC522_COM_IRQ_REG);
 ac4:	24 e0       	ldi	r18, 0x04	; 4
 ac6:	49 81       	ldd	r20, Y+1	; 0x01
 ac8:	5a 81       	ldd	r21, Y+2	; 0x02
 aca:	6b 81       	ldd	r22, Y+3	; 0x03
 acc:	7c 81       	ldd	r23, Y+4	; 0x04
 ace:	8d 81       	ldd	r24, Y+5	; 0x05
 ad0:	0e 94 04 04 	call	0x808	; 0x808 <read_register>

00000ad4 <.LVL40>:
        if (irq & 0x30) break;
 ad4:	80 73       	andi	r24, 0x30	; 48

00000ad6 <.Loc.100>:
 ad6:	81 11       	cpse	r24, r1
 ad8:	03 c0       	rjmp	.+6      	; 0xae0 <.L13>

00000ada <.LBE5>:
    for (i = 0; i < 200; i++) {
 ada:	11 50       	subi	r17, 0x01	; 1

00000adc <.Loc.103>:
 adc:	11 11       	cpse	r17, r1
 ade:	f2 cf       	rjmp	.-28     	; 0xac4 <.L14>

00000ae0 <.L13>:
    }

    uint8_t error = read_register(dev, 0x06); // ErrorReg
 ae0:	26 e0       	ldi	r18, 0x06	; 6
 ae2:	49 81       	ldd	r20, Y+1	; 0x01
 ae4:	5a 81       	ldd	r21, Y+2	; 0x02
 ae6:	6b 81       	ldd	r22, Y+3	; 0x03
 ae8:	7c 81       	ldd	r23, Y+4	; 0x04
 aea:	8d 81       	ldd	r24, Y+5	; 0x05
 aec:	0e 94 04 04 	call	0x808	; 0x808 <read_register>

00000af0 <.LVL45>:
    if (error & 0x1B) return false;
 af0:	8b 71       	andi	r24, 0x1B	; 27

00000af2 <.Loc.108>:
 af2:	88 23       	and	r24, r24
 af4:	59 f0       	breq	.+22     	; 0xb0c <.L19>

00000af6 <.Loc.109>:
 af6:	80 e0       	ldi	r24, 0x00	; 0

00000af8 <.L12>:

    uint8_t len = read_register(dev, MFRC522_FIFO_LEVEL_REG);
    write_register(dev, MFRC522_FIFO_LEVEL_REG, 0x80); // Flush FIFO
    return (len != 0);
}
 af8:	0f 90       	pop	r0
 afa:	0f 90       	pop	r0
 afc:	0f 90       	pop	r0
 afe:	0f 90       	pop	r0
 b00:	0f 90       	pop	r0
 b02:	df 91       	pop	r29
 b04:	cf 91       	pop	r28
 b06:	1f 91       	pop	r17
 b08:	0f 91       	pop	r16
 b0a:	08 95       	ret

00000b0c <.L19>:
    uint8_t len = read_register(dev, MFRC522_FIFO_LEVEL_REG);
 b0c:	2a e0       	ldi	r18, 0x0A	; 10
 b0e:	49 81       	ldd	r20, Y+1	; 0x01
 b10:	5a 81       	ldd	r21, Y+2	; 0x02
 b12:	6b 81       	ldd	r22, Y+3	; 0x03
 b14:	7c 81       	ldd	r23, Y+4	; 0x04
 b16:	8d 81       	ldd	r24, Y+5	; 0x05
 b18:	0e 94 04 04 	call	0x808	; 0x808 <read_register>

00000b1c <.LVL47>:
 b1c:	18 2f       	mov	r17, r24

00000b1e <.Loc.113>:
    write_register(dev, MFRC522_FIFO_LEVEL_REG, 0x80); // Flush FIFO
 b1e:	00 e8       	ldi	r16, 0x80	; 128
 b20:	2a e0       	ldi	r18, 0x0A	; 10
 b22:	49 81       	ldd	r20, Y+1	; 0x01
 b24:	5a 81       	ldd	r21, Y+2	; 0x02
 b26:	6b 81       	ldd	r22, Y+3	; 0x03
 b28:	7c 81       	ldd	r23, Y+4	; 0x04
 b2a:	8d 81       	ldd	r24, Y+5	; 0x05
 b2c:	0e 94 3d 04 	call	0x87a	; 0x87a <write_register>

00000b30 <.LVL49>:
    return (len != 0);
 b30:	81 e0       	ldi	r24, 0x01	; 1
 b32:	11 11       	cpse	r17, r1
 b34:	e1 cf       	rjmp	.-62     	; 0xaf8 <.L12>
 b36:	80 e0       	ldi	r24, 0x00	; 0
 b38:	df cf       	rjmp	.-66     	; 0xaf8 <.L12>

00000b3a <rfid_tag_detected>:

bool rfid_tag_detected(spi_device dev){
 b3a:	cf 93       	push	r28
 b3c:	df 93       	push	r29
 b3e:	00 d0       	rcall	.+0      	; 0xb40 <L0^A>

00000b40 <L0^A>:
 b40:	0f 92       	push	r0
 b42:	0f 92       	push	r0
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
 b48:	49 83       	std	Y+1, r20	; 0x01
 b4a:	5a 83       	std	Y+2, r21	; 0x02
 b4c:	6b 83       	std	Y+3, r22	; 0x03
 b4e:	7c 83       	std	Y+4, r23	; 0x04
 b50:	8d 83       	std	Y+5, r24	; 0x05

00000b52 <.Loc.117>:
    for(int i = 0; i < 2; i++){
        if(rfid_check_tag_present(dev)){
 b52:	0e 94 2b 05 	call	0xa56	; 0xa56 <rfid_check_tag_present>

00000b56 <.LVL51>:
 b56:	81 11       	cpse	r24, r1
 b58:	1d c0       	rjmp	.+58     	; 0xb94 <.L21>

00000b5a <.LBI7>:
 b5a:	8f e9       	ldi	r24, 0x9F	; 159
 b5c:	9f e0       	ldi	r25, 0x0F	; 15

00000b5e <.L1^B4>:
 b5e:	01 97       	sbiw	r24, 0x01	; 1
 b60:	f1 f7       	brne	.-4      	; 0xb5e <.L1^B4>
 b62:	00 c0       	rjmp	.+0      	; 0xb64 <L0^A>

00000b64 <L0^A>:
	...

00000b66 <.Loc.131>:
 b66:	49 81       	ldd	r20, Y+1	; 0x01
 b68:	5a 81       	ldd	r21, Y+2	; 0x02
 b6a:	6b 81       	ldd	r22, Y+3	; 0x03
 b6c:	7c 81       	ldd	r23, Y+4	; 0x04
 b6e:	8d 81       	ldd	r24, Y+5	; 0x05
 b70:	0e 94 2b 05 	call	0xa56	; 0xa56 <rfid_check_tag_present>

00000b74 <.LVL54>:
 b74:	81 11       	cpse	r24, r1
 b76:	0e c0       	rjmp	.+28     	; 0xb94 <.L21>

00000b78 <.Loc.137>:
 b78:	ef e9       	ldi	r30, 0x9F	; 159
 b7a:	ff e0       	ldi	r31, 0x0F	; 15

00000b7c <.L1^B5>:
 b7c:	31 97       	sbiw	r30, 0x01	; 1
 b7e:	f1 f7       	brne	.-4      	; 0xb7c <.L1^B5>
 b80:	00 c0       	rjmp	.+0      	; 0xb82 <L0^A>

00000b82 <L0^A>:
	...

00000b84 <.L20>:
        }
        // Very short delay needed, can be replaced with short timer
        _delay_ms(1);
    }
    return 0;
}
 b84:	0f 90       	pop	r0
 b86:	0f 90       	pop	r0
 b88:	0f 90       	pop	r0
 b8a:	0f 90       	pop	r0
 b8c:	0f 90       	pop	r0
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	08 95       	ret

00000b94 <.L21>:
            return 1;
 b94:	81 e0       	ldi	r24, 0x01	; 1
 b96:	f6 cf       	rjmp	.-20     	; 0xb84 <.L20>

00000b98 <timer0_init>:

volatile unsigned long millis_count = 0;

void timer0_init() {
    // Timer0: CTC mode, prescaler 64
    TCCR0A = (1 << WGM01);             // CTC mode
 b98:	82 e0       	ldi	r24, 0x02	; 2
 b9a:	84 bd       	out	0x24, r24	; 36

00000b9c <.Loc.3>:
    TCCR0B = (1 << CS01) | (1 << CS00); // prescaler 64
 b9c:	83 e0       	ldi	r24, 0x03	; 3
 b9e:	85 bd       	out	0x25, r24	; 37

00000ba0 <.Loc.5>:
    OCR0A = 249; // 1 ms bij 16 MHz: (16e6 / (64 * 1000)) - 1
 ba0:	89 ef       	ldi	r24, 0xF9	; 249
 ba2:	87 bd       	out	0x27, r24	; 39

00000ba4 <.Loc.7>:

    TIMSK0 |= (1 << OCIE0A); // Enable compare match interrupt
 ba4:	ee e6       	ldi	r30, 0x6E	; 110
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 81       	ld	r24, Z

00000baa <.Loc.8>:
 baa:	82 60       	ori	r24, 0x02	; 2
 bac:	80 83       	st	Z, r24

00000bae <.Loc.9>:
}
 bae:	08 95       	ret

00000bb0 <__vector_21>:

ISR(TIMER0_COMPA_vect) {
 bb0:	1f 92       	push	r1
 bb2:	1f b6       	in	r1, 0x3f	; 63
 bb4:	1f 92       	push	r1
 bb6:	11 24       	eor	r1, r1
 bb8:	8f 93       	push	r24
 bba:	9f 93       	push	r25
 bbc:	af 93       	push	r26
 bbe:	bf 93       	push	r27

00000bc0 <.Loc.11>:
    millis_count++;
 bc0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <millis_count>
 bc4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <millis_count+0x1>
 bc8:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <millis_count+0x2>
 bcc:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <millis_count+0x3>
 bd0:	01 96       	adiw	r24, 0x01	; 1
 bd2:	a1 1d       	adc	r26, r1
 bd4:	b1 1d       	adc	r27, r1
 bd6:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <millis_count>
 bda:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <millis_count+0x1>
 bde:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <millis_count+0x2>
 be2:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <millis_count+0x3>

00000be6 <.Loc.13>:
}
 be6:	bf 91       	pop	r27
 be8:	af 91       	pop	r26
 bea:	9f 91       	pop	r25
 bec:	8f 91       	pop	r24
 bee:	1f 90       	pop	r1
 bf0:	1f be       	out	0x3f, r1	; 63
 bf2:	1f 90       	pop	r1
 bf4:	18 95       	reti

00000bf6 <millis>:

unsigned long millis() {
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	00 d0       	rcall	.+0      	; 0xbfc <L0^A>

00000bfc <L0^A>:
 bfc:	0f 92       	push	r0
 bfe:	cd b7       	in	r28, 0x3d	; 61
 c00:	de b7       	in	r29, 0x3e	; 62

00000c02 <.Loc.15>:
    unsigned long ms;
    cli();
 c02:	f8 94       	cli

00000c04 <.Loc.17>:
    ms = millis_count;
 c04:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <millis_count>
 c08:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <millis_count+0x1>
 c0c:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <millis_count+0x2>
 c10:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <millis_count+0x3>
 c14:	89 83       	std	Y+1, r24	; 0x01
 c16:	9a 83       	std	Y+2, r25	; 0x02
 c18:	ab 83       	std	Y+3, r26	; 0x03
 c1a:	bc 83       	std	Y+4, r27	; 0x04

00000c1c <.Loc.19>:
    sei();
 c1c:	78 94       	sei

00000c1e <.Loc.20>:
    return ms;
}
 c1e:	69 81       	ldd	r22, Y+1	; 0x01
 c20:	7a 81       	ldd	r23, Y+2	; 0x02
 c22:	8b 81       	ldd	r24, Y+3	; 0x03
 c24:	9c 81       	ldd	r25, Y+4	; 0x04
 c26:	0f 90       	pop	r0
 c28:	0f 90       	pop	r0
 c2a:	0f 90       	pop	r0
 c2c:	0f 90       	pop	r0
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	08 95       	ret

00000c34 <__udivmodsi4>:
 c34:	a1 e2       	ldi	r26, 0x21	; 33

00000c36 <.Loc.1>:
 c36:	1a 2e       	mov	r1, r26

00000c38 <.Loc.2>:
 c38:	aa 1b       	sub	r26, r26

00000c3a <.Loc.3>:
 c3a:	bb 1b       	sub	r27, r27

00000c3c <.Loc.4>:
 c3c:	fd 01       	movw	r30, r26

00000c3e <.Loc.5>:
 c3e:	0d c0       	rjmp	.+26     	; 0xc5a <__udivmodsi4_ep>

00000c40 <__udivmodsi4_loop>:
 c40:	aa 1f       	adc	r26, r26

00000c42 <.Loc.7>:
 c42:	bb 1f       	adc	r27, r27

00000c44 <.Loc.8>:
 c44:	ee 1f       	adc	r30, r30

00000c46 <.Loc.9>:
 c46:	ff 1f       	adc	r31, r31

00000c48 <.Loc.10>:
 c48:	a2 17       	cp	r26, r18

00000c4a <.Loc.11>:
 c4a:	b3 07       	cpc	r27, r19

00000c4c <.Loc.12>:
 c4c:	e4 07       	cpc	r30, r20

00000c4e <.Loc.13>:
 c4e:	f5 07       	cpc	r31, r21

00000c50 <.Loc.14>:
 c50:	20 f0       	brcs	.+8      	; 0xc5a <__udivmodsi4_ep>

00000c52 <.Loc.15>:
 c52:	a2 1b       	sub	r26, r18

00000c54 <.Loc.16>:
 c54:	b3 0b       	sbc	r27, r19

00000c56 <.Loc.17>:
 c56:	e4 0b       	sbc	r30, r20

00000c58 <.Loc.18>:
 c58:	f5 0b       	sbc	r31, r21

00000c5a <__udivmodsi4_ep>:
 c5a:	66 1f       	adc	r22, r22

00000c5c <.Loc.20>:
 c5c:	77 1f       	adc	r23, r23

00000c5e <.Loc.21>:
 c5e:	88 1f       	adc	r24, r24

00000c60 <.Loc.22>:
 c60:	99 1f       	adc	r25, r25

00000c62 <.Loc.23>:
 c62:	1a 94       	dec	r1

00000c64 <.Loc.24>:
 c64:	69 f7       	brne	.-38     	; 0xc40 <__udivmodsi4_loop>

00000c66 <.Loc.25>:
 c66:	60 95       	com	r22

00000c68 <.Loc.26>:
 c68:	70 95       	com	r23

00000c6a <.Loc.27>:
 c6a:	80 95       	com	r24

00000c6c <.Loc.28>:
 c6c:	90 95       	com	r25

00000c6e <.Loc.29>:
 c6e:	9b 01       	movw	r18, r22

00000c70 <.Loc.30>:
 c70:	ac 01       	movw	r20, r24

00000c72 <.Loc.31>:
 c72:	bd 01       	movw	r22, r26

00000c74 <.Loc.32>:
 c74:	cf 01       	movw	r24, r30

00000c76 <.Loc.33>:
 c76:	08 95       	ret

00000c78 <__tablejump2__>:
 c78:	ee 0f       	add	r30, r30

00000c7a <.Loc.1>:
 c7a:	ff 1f       	adc	r31, r31

00000c7c <.Loc.2>:
 c7c:	88 1f       	adc	r24, r24

00000c7e <.Loc.3>:
 c7e:	8b bf       	out	0x3b, r24	; 59

00000c80 <.Loc.4>:
 c80:	07 90       	elpm	r0, Z+

00000c82 <.Loc.5>:
 c82:	f6 91       	elpm	r31, Z

00000c84 <.Loc.6>:
 c84:	e0 2d       	mov	r30, r0

00000c86 <.Loc.7>:
 c86:	19 94       	eijmp

00000c88 <__umulhisi3>:
 c88:	a2 9f       	mul	r26, r18

00000c8a <.Loc.1>:
 c8a:	b0 01       	movw	r22, r0

00000c8c <.Loc.2>:
 c8c:	b3 9f       	mul	r27, r19

00000c8e <.Loc.3>:
 c8e:	c0 01       	movw	r24, r0

00000c90 <.Loc.4>:
 c90:	a3 9f       	mul	r26, r19

00000c92 <.Loc.5>:
 c92:	70 0d       	add	r23, r0

00000c94 <.Loc.6>:
 c94:	81 1d       	adc	r24, r1

00000c96 <.Loc.7>:
 c96:	11 24       	eor	r1, r1

00000c98 <.Loc.8>:
 c98:	91 1d       	adc	r25, r1

00000c9a <.Loc.9>:
 c9a:	b2 9f       	mul	r27, r18

00000c9c <.Loc.10>:
 c9c:	70 0d       	add	r23, r0

00000c9e <.Loc.11>:
 c9e:	81 1d       	adc	r24, r1

00000ca0 <.Loc.12>:
 ca0:	11 24       	eor	r1, r1

00000ca2 <.Loc.13>:
 ca2:	91 1d       	adc	r25, r1

00000ca4 <.Loc.14>:
 ca4:	08 95       	ret

00000ca6 <_exit>:
 ca6:	f8 94       	cli

00000ca8 <__stop_program>:
 ca8:	ff cf       	rjmp	.-2      	; 0xca8 <__stop_program>

00000caa <L0^A>:
 caa:	e6 00       	.word	0x00e6	; ????
 cac:	e8 00       	.word	0x00e8	; ????
 cae:	e8 00       	.word	0x00e8	; ????
 cb0:	e8 00       	.word	0x00e8	; ????
 cb2:	e8 00       	.word	0x00e8	; ????
 cb4:	e8 00       	.word	0x00e8	; ????
 cb6:	e8 00       	.word	0x00e8	; ????
 cb8:	e8 00       	.word	0x00e8	; ????
 cba:	e8 00       	.word	0x00e8	; ????
 cbc:	e8 00       	.word	0x00e8	; ????
 cbe:	e8 00       	.word	0x00e8	; ????
 cc0:	e8 00       	.word	0x00e8	; ????
 cc2:	e8 00       	.word	0x00e8	; ????
 cc4:	e8 00       	.word	0x00e8	; ????
 cc6:	e8 00       	.word	0x00e8	; ????
 cc8:	e8 00       	.word	0x00e8	; ????
 cca:	c7 00       	.word	0x00c7	; ????
 ccc:	c7 00       	.word	0x00c7	; ????
 cce:	c7 00       	.word	0x00c7	; ????
 cd0:	c7 00       	.word	0x00c7	; ????
 cd2:	c7 00       	.word	0x00c7	; ????
 cd4:	c7 00       	.word	0x00c7	; ????
 cd6:	c7 00       	.word	0x00c7	; ????
 cd8:	c7 00       	.word	0x00c7	; ????
 cda:	c7 00       	.word	0x00c7	; ????
 cdc:	c7 00       	.word	0x00c7	; ????
 cde:	e8 00       	.word	0x00e8	; ????
 ce0:	e8 00       	.word	0x00e8	; ????
 ce2:	e8 00       	.word	0x00e8	; ????
 ce4:	e8 00       	.word	0x00e8	; ????
 ce6:	e8 00       	.word	0x00e8	; ????
 ce8:	e8 00       	.word	0x00e8	; ????
 cea:	e8 00       	.word	0x00e8	; ????
 cec:	c5 00       	.word	0x00c5	; ????
 cee:	ea 00       	.word	0x00ea	; ????
 cf0:	ce 00       	.word	0x00ce	; ????
 cf2:	d0 00       	.word	0x00d0	; ????
 cf4:	d2 00       	.word	0x00d2	; ????
 cf6:	d4 00       	.word	0x00d4	; ????
 cf8:	e8 00       	.word	0x00e8	; ????
 cfa:	e8 00       	.word	0x00e8	; ????
 cfc:	e8 00       	.word	0x00e8	; ????
 cfe:	e8 00       	.word	0x00e8	; ????
 d00:	e8 00       	.word	0x00e8	; ????
 d02:	d6 00       	.word	0x00d6	; ????
 d04:	e8 00       	.word	0x00e8	; ????
 d06:	d8 00       	.word	0x00d8	; ????
 d08:	da 00       	.word	0x00da	; ????
 d0a:	dc 00       	.word	0x00dc	; ????
 d0c:	e8 00       	.word	0x00e8	; ????
 d0e:	de 00       	.word	0x00de	; ????
 d10:	e0 00       	.word	0x00e0	; ????
 d12:	e2 00       	.word	0x00e2	; ????
 d14:	e4 00       	.word	0x00e4	; ????
