
bin\Debug\AGV_code_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000db0  00000e64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800206  00800206  00000e6a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000e6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000e6d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000138  00000000  00000000  00000ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001664  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000011e9  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001042  00000000  00000000  00003845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000274  00000000  00000000  00004888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000867  00000000  00000000  00004afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 00000241  00000000  00000000  00005363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000001a3  00000000  00000000  000055a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_41>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_45>
  b8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_46>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_50>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_54>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
  f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
  f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
  fa:	e0 eb       	ldi	r30, 0xB0	; 176

000000fc <.Loc.4>:
  fc:	fd e0       	ldi	r31, 0x0D	; 13

000000fe <.Loc.5>:
  fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
 100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
 102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
 104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
 106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
 108:	a6 30       	cpi	r26, 0x06	; 6

0000010a <.Loc.11>:
 10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
 10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
 110:	a6 e0       	ldi	r26, 0x06	; 6

00000112 <.Loc.2>:
 112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
 114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
 116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
 118:	a0 36       	cpi	r26, 0x60	; 96

0000011a <.Loc.6>:
 11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
 11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
 11e:	0e 94 ab 01 	call	0x356	; 0x356 <main>
 122:	0c 94 d6 06 	jmp	0xdac	; 0xdac <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <__vector_41>:
// Gets updated with approx 30Hz
volatile int centimeters_1 = 0;
volatile int centimeters_2 = 0;


ISR(TIMER4_CAPT_vect){
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	1f 92       	push	r1
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	2b b7       	in	r18, 0x3b	; 59
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31

0000014c <.Loc.1>:
    static volatile int start_time_1 = 0;
    // If interrupt is set to rising edge
    if (TCCR4B & (1 << ICES4)) {
 14c:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

00000150 <.Loc.4>:
 150:	86 ff       	sbrs	r24, 6
 152:	1e c0       	rjmp	.+60     	; 0x190 <.L2>

00000154 <.Loc.5>:
        // Store echo start value
        start_time_1 = ICR4;
 154:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 158:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>

0000015c <.Loc.7>:
 15c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <start_time_1.1+0x1>
 160:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <start_time_1.1>

00000164 <.Loc.8>:
        // Switch to falling edge
        TCCR4B &= ~(1 << ICES4);
 164:	e1 ea       	ldi	r30, 0xA1	; 161
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8f 7b       	andi	r24, 0xBF	; 191
 16c:	80 83       	st	Z, r24

0000016e <.L1>:
    // If interrupt is set to falling edge
    else {
        // distance in centimeters = (total_time/2)*0.01715 - to simplify this: distance = total_time/117
        centimeters_1 = (ICR4 - start_time_1)/117;
    }
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	2b bf       	out	0x3b, r18	; 59
 184:	2f 91       	pop	r18
 186:	1f 90       	pop	r1
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	18 95       	reti

00000190 <.L2>:
        centimeters_1 = (ICR4 - start_time_1)/117;
 190:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 194:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>

00000198 <.Loc.13>:
 198:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start_time_1.1>
 19c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start_time_1.1+0x1>
 1a0:	28 1b       	sub	r18, r24
 1a2:	39 0b       	sbc	r19, r25

000001a4 <.Loc.14>:
 1a4:	a9 e0       	ldi	r26, 0x09	; 9
 1a6:	bc e8       	ldi	r27, 0x8C	; 140
 1a8:	0e 94 c0 03 	call	0x780	; 0x780 <__umulhisi3>
 1ac:	00 24       	eor	r0, r0
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	00 1c       	adc	r0, r0
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	00 1c       	adc	r0, r0
 1ba:	89 2f       	mov	r24, r25
 1bc:	90 2d       	mov	r25, r0

000001be <.Loc.15>:
 1be:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <centimeters_1+0x1>
 1c2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <centimeters_1>

000001c6 <.Loc.16>:
}
 1c6:	d3 cf       	rjmp	.-90     	; 0x16e <.L1>

000001c8 <__vector_46>:

ISR(TIMER5_CAPT_vect){
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	1f 92       	push	r1
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	2b b7       	in	r18, 0x3b	; 59
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31

000001ea <.Loc.18>:
    static volatile int start_time_2 = 0;
    // If interrupt is set to rising edge
    if (TCCR5B & (1 << ICES5)) {
 1ea:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000001ee <.Loc.21>:
 1ee:	86 ff       	sbrs	r24, 6
 1f0:	1e c0       	rjmp	.+60     	; 0x22e <.L5>

000001f2 <.Loc.22>:
        // Store echo start value
        start_time_2 = ICR5;
 1f2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 1f6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

000001fa <.Loc.24>:
 1fa:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <start_time_2.0+0x1>
 1fe:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <start_time_2.0>

00000202 <.Loc.25>:
        // Switch to falling edge
        TCCR5B &= ~(1 << ICES5);
 202:	e1 e2       	ldi	r30, 0x21	; 33
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	80 81       	ld	r24, Z
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	80 83       	st	Z, r24

0000020c <.L4>:
    // If interrupt is set to falling edge
    else {
        // distance in centimeters = (total_time/2)*0.01715 - to simplify this: distance = total_time/117
        centimeters_2 = (ICR5 - start_time_2)/117;
    }
}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	2b bf       	out	0x3b, r18	; 59
 222:	2f 91       	pop	r18
 224:	1f 90       	pop	r1
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	18 95       	reti

0000022e <.L5>:
        centimeters_2 = (ICR5 - start_time_2)/117;
 22e:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
 232:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>

00000236 <.Loc.30>:
 236:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <start_time_2.0>
 23a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <start_time_2.0+0x1>
 23e:	28 1b       	sub	r18, r24
 240:	39 0b       	sbc	r19, r25

00000242 <.Loc.31>:
 242:	a9 e0       	ldi	r26, 0x09	; 9
 244:	bc e8       	ldi	r27, 0x8C	; 140
 246:	0e 94 c0 03 	call	0x780	; 0x780 <__umulhisi3>
 24a:	00 24       	eor	r0, r0
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	00 1c       	adc	r0, r0
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	00 1c       	adc	r0, r0
 258:	89 2f       	mov	r24, r25
 25a:	90 2d       	mov	r25, r0

0000025c <.Loc.32>:
 25c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <centimeters_2+0x1>
 260:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <centimeters_2>

00000264 <.Loc.33>:
}
 264:	d3 cf       	rjmp	.-90     	; 0x20c <.L4>

00000266 <__vector_45>:
// Switch back to rising edge
ISR(TIMER4_OVF_vect){
 266:	8f 93       	push	r24
 268:	8f b7       	in	r24, 0x3f	; 63
 26a:	8f 93       	push	r24
 26c:	8b b7       	in	r24, 0x3b	; 59
 26e:	8f 93       	push	r24
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31

00000274 <.Loc.35>:
    TCCR4B |= (1 << ICES4);
 274:	e1 ea       	ldi	r30, 0xA1	; 161
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z

0000027a <.Loc.36>:
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	80 83       	st	Z, r24

0000027e <.Loc.37>:

}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	8f 91       	pop	r24
 284:	8b bf       	out	0x3b, r24	; 59
 286:	8f 91       	pop	r24
 288:	8f bf       	out	0x3f, r24	; 63
 28a:	8f 91       	pop	r24
 28c:	18 95       	reti

0000028e <__vector_50>:

ISR(TIMER5_OVF_vect){
 28e:	8f 93       	push	r24
 290:	8f b7       	in	r24, 0x3f	; 63
 292:	8f 93       	push	r24
 294:	8b b7       	in	r24, 0x3b	; 59
 296:	8f 93       	push	r24
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31

0000029c <.Loc.39>:
    TCCR5B |= (1 << ICES5);
 29c:	e1 e2       	ldi	r30, 0x21	; 33
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	80 81       	ld	r24, Z

000002a2 <.Loc.40>:
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	80 83       	st	Z, r24

000002a6 <.Loc.41>:
}
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	8f 91       	pop	r24
 2ac:	8b bf       	out	0x3b, r24	; 59
 2ae:	8f 91       	pop	r24
 2b0:	8f bf       	out	0x3f, r24	; 63
 2b2:	8f 91       	pop	r24
 2b4:	18 95       	reti

000002b6 <ultrasonic_init>:

void ultrasonic_init(void){
    // Config Trig pin (Pin 44 - PL5)
    DDRL |= PIN_TRIG;
 2b6:	ea e0       	ldi	r30, 0x0A	; 10
 2b8:	f1 e0       	ldi	r31, 0x01	; 1
 2ba:	80 81       	ld	r24, Z

000002bc <.Loc.44>:
 2bc:	80 62       	ori	r24, 0x20	; 32
 2be:	80 83       	st	Z, r24

000002c0 <.Loc.45>:
    PORTL &= ~PIN_TRIG;
 2c0:	ab e0       	ldi	r26, 0x0B	; 11
 2c2:	b1 e0       	ldi	r27, 0x01	; 1
 2c4:	8c 91       	ld	r24, X
 2c6:	8f 7d       	andi	r24, 0xDF	; 223
 2c8:	8c 93       	st	X, r24

000002ca <.Loc.47>:

    // Config Echo pin
    DDRL &= ~PIN_ECHO_1;
 2ca:	80 81       	ld	r24, Z
 2cc:	8d 7f       	andi	r24, 0xFD	; 253
 2ce:	80 83       	st	Z, r24

000002d0 <.Loc.49>:
    DDRL &= ~PIN_ECHO_2;
 2d0:	80 81       	ld	r24, Z
 2d2:	8e 7f       	andi	r24, 0xFE	; 254
 2d4:	80 83       	st	Z, r24

000002d6 <.Loc.51>:
    // Timer 5 Configuration for Trigger Pulse
    TCCR5A = (1 << COM5C1) | (1 << WGM51) | (1 << WGM50);
 2d6:	8b e0       	ldi	r24, 0x0B	; 11
 2d8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>

000002dc <.Loc.53>:
    TCCR5B = (1 << WGM53) | (1 << WGM52) | (1 << CS51) | (1 << ICES5);
 2dc:	8a e5       	ldi	r24, 0x5A	; 90
 2de:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

000002e2 <.Loc.55>:
    TIMSK5 = (1 << ICIE5) | (1 << TOIE5);
 2e2:	81 e2       	ldi	r24, 0x21	; 33
 2e4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

000002e8 <.Loc.57>:

    // Set top value to max
    OCR5A = 0xFFFF;
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	3f ef       	ldi	r19, 0xFF	; 255
 2ec:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 2f0:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>

000002f4 <.Loc.59>:
    // Set trigger to 10us signal
    OCR5C = 20;
 2f4:	24 e1       	ldi	r18, 0x14	; 20
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 2fc:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>

00000300 <.Loc.61>:

    // Timer 4 Configuration for Echo Capture
    TCCR4A = 0;
 300:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>

00000304 <.Loc.63>:
    TCCR4B = (1 << ICES4) | (1 << CS41);
 304:	92 e4       	ldi	r25, 0x42	; 66
 306:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

0000030a <.Loc.65>:
    TIMSK4 = (1 << ICIE4) | (1 << TOV4);
 30a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>

0000030e <.Loc.67>:


}
 30e:	08 95       	ret

00000310 <init_interface>:
#include "state_machine.h"


// Initialiseer de knoppen
void init_interface() {
    DDRC &= ~(START_BUTTON | STOP_BUTTON);
 310:	87 b1       	in	r24, 0x07	; 7
 312:	87 7e       	andi	r24, 0xE7	; 231
 314:	87 b9       	out	0x07, r24	; 7

00000316 <.Loc.3>:
    PORTC |= (START_BUTTON | STOP_BUTTON ); // Pull-ups aan
 316:	88 b1       	in	r24, 0x08	; 8

00000318 <.Loc.4>:
 318:	88 61       	ori	r24, 0x18	; 24
 31a:	88 b9       	out	0x08, r24	; 8

0000031c <.Loc.5>:
    DDRD &= ~EMERGENCY_STOP_BUTTON;
 31c:	52 98       	cbi	0x0a, 2	; 10

0000031e <.Loc.7>:
    PORTD |= EMERGENCY_STOP_BUTTON;
 31e:	5a 9a       	sbi	0x0b, 2	; 11

00000320 <.Loc.9>:
}
 320:	08 95       	ret

00000322 <button_pressed>:



// Verbeterde debounce voor knoppen
uint8_t button_pressed(uint8_t button_mask) {
 322:	98 2f       	mov	r25, r24

00000324 <.Loc.12>:
    static uint8_t button_last_state = 0;
    uint8_t current_state = PINC & button_mask;
 324:	26 b1       	in	r18, 0x06	; 6

00000326 <.Loc.15>:
 326:	28 23       	and	r18, r24

00000328 <.Loc.16>:
    uint8_t pressed = 0;
 328:	80 e0       	ldi	r24, 0x00	; 0

0000032a <.Loc.19>:

    if (!current_state && (button_last_state & button_mask)) {
 32a:	21 11       	cpse	r18, r1
 32c:	0c c0       	rjmp	.+24     	; 0x346 <.L3>

0000032e <.Loc.20>:
 32e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <button_last_state.0>
 332:	89 23       	and	r24, r25
 334:	88 23       	and	r24, r24
 336:	39 f0       	breq	.+14     	; 0x346 <.L3>

00000338 <.LBB4>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 338:	ef e3       	ldi	r30, 0x3F	; 63
 33a:	fc e9       	ldi	r31, 0x9C	; 156

0000033c <.L1^B1>:
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <.L1^B1>
 340:	00 c0       	rjmp	.+0      	; 0x342 <L0^A>

00000342 <L0^A>:
	...

00000344 <.LBE4>:
        _delay_ms(10); // Debounce
        pressed = 1;
 344:	81 e0       	ldi	r24, 0x01	; 1

00000346 <.L3>:
    }

    button_last_state = (button_last_state & ~button_mask) | (current_state & button_mask);
 346:	90 95       	com	r25

00000348 <.Loc.34>:
 348:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <button_last_state.0>
 34c:	93 23       	and	r25, r19

0000034e <.Loc.35>:
 34e:	92 2b       	or	r25, r18

00000350 <.Loc.36>:
 350:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <button_last_state.0>

00000354 <.Loc.37>:
    return pressed;
}
 354:	08 95       	ret

00000356 <main>:
uint8_t huidige_richting = RICHTING_RECHTS; // wordt overschreven bij start



int main(void) {
    init_interface();
 356:	0e 94 88 01 	call	0x310	; 0x310 <init_interface>

0000035a <.LVL0>:
    ultrasonic_init();
 35a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <ultrasonic_init>

0000035e <.LVL1>:
    stepper_init();
 35e:	0e 94 82 02 	call	0x504	; 0x504 <stepper_init>

00000362 <.LVL2>:
    uart3_init();
 362:	0e 94 bb 02 	call	0x576	; 0x576 <uart3_init>

00000366 <.L2>:


    while (1) {
        set_stepper_speed(100);
 366:	84 e6       	ldi	r24, 0x64	; 100
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 ce 01 	call	0x39c	; 0x39c <set_stepper_speed>

0000036e <.LVL4>:
        stepper_activation(1);
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 be 01 	call	0x37c	; 0x37c <stepper_activation>

00000376 <.LVL5>:
        rij_door_latjes();
 376:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <rij_door_latjes>

0000037a <.LVL6>:
    while (1) {
 37a:	f5 cf       	rjmp	.-22     	; 0x366 <.L2>

0000037c <stepper_activation>:
// Globale snelheidsvariabelen
volatile int stepper_speed_1;
volatile int stepper_speed_2;
volatile int stepper_speed_gen;

void stepper_activation(int status) {
 37c:	28 2f       	mov	r18, r24
 37e:	39 2f       	mov	r19, r25

00000380 <.Loc.2>:
    if (status == 0) {
 380:	21 15       	cp	r18, r1
 382:	31 05       	cpc	r19, r1
 384:	21 f4       	brne	.+8      	; 0x38e <.L2>

00000386 <.Loc.4>:
        PORTB |= EN1 | EN2;
 386:	85 b1       	in	r24, 0x05	; 5

00000388 <.Loc.5>:
 388:	8a 60       	ori	r24, 0x0A	; 10
 38a:	85 b9       	out	0x05, r24	; 5
 38c:	08 95       	ret

0000038e <.L2>:
    } else if (status >= 1) {
 38e:	12 16       	cp	r1, r18
 390:	13 06       	cpc	r1, r19
 392:	1c f4       	brge	.+6      	; 0x39a <.L1>

00000394 <.Loc.8>:
        PORTB &= ~(EN1 | EN2);
 394:	85 b1       	in	r24, 0x05	; 5

00000396 <.Loc.10>:
 396:	85 7f       	andi	r24, 0xF5	; 245
 398:	85 b9       	out	0x05, r24	; 5

0000039a <.L1>:
    }
}
 39a:	08 95       	ret

0000039c <set_stepper_speed>:

void set_stepper_speed(int procent) {
    stepper_speed_gen = 10000 - ((procent * 9500) / 100);
 39c:	41 ea       	ldi	r20, 0xA1	; 161
 39e:	bc 01       	movw	r22, r24
 3a0:	46 03       	mulsu	r20, r22
 3a2:	90 01       	movw	r18, r0
 3a4:	47 9f       	mul	r20, r23
 3a6:	30 0d       	add	r19, r0
 3a8:	11 24       	eor	r1, r1

000003aa <.Loc.15>:
 3aa:	20 5f       	subi	r18, 0xF0	; 240
 3ac:	38 4d       	sbci	r19, 0xD8	; 216

000003ae <.Loc.16>:
 3ae:	30 93 12 02 	sts	0x0212, r19	; 0x800212 <stepper_speed_gen+0x1>
 3b2:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <stepper_speed_gen>

000003b6 <.Loc.17>:
}
 3b6:	08 95       	ret

000003b8 <rij_door_latjes>:

void rij_door_latjes() {
    int verschil = centimeters_1 - centimeters_2;
 3b8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <centimeters_1>
 3bc:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <centimeters_1+0x1>
 3c0:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <centimeters_2>
 3c4:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <centimeters_2+0x1>

000003c8 <.Loc.21>:
 3c8:	82 1b       	sub	r24, r18
 3ca:	93 0b       	sbc	r25, r19

000003cc <.Loc.22>:
    int speed_adjustment = abs(verschil) * 100;
 3cc:	9c 01       	movw	r18, r24
 3ce:	99 23       	and	r25, r25
 3d0:	f4 f0       	brlt	.+60     	; 0x40e <.L10>

000003d2 <.L6>:
 3d2:	44 e6       	ldi	r20, 0x64	; 100
 3d4:	42 9f       	mul	r20, r18
 3d6:	b0 01       	movw	r22, r0
 3d8:	43 9f       	mul	r20, r19
 3da:	70 0d       	add	r23, r0
 3dc:	11 24       	eor	r1, r1

000003de <.Loc.25>:

    if (verschil < 0) {
 3de:	99 23       	and	r25, r25
 3e0:	dc f0       	brlt	.+54     	; 0x418 <.L11>

000003e2 <.Loc.27>:
        stepper_speed_1 = stepper_speed_gen + speed_adjustment;
        stepper_speed_2 = stepper_speed_gen;
    } else if (verschil > 0) {
 3e2:	18 16       	cp	r1, r24
 3e4:	19 06       	cpc	r1, r25
 3e6:	dc f5       	brge	.+118    	; 0x45e <.L9>

000003e8 <.Loc.29>:
        stepper_speed_1 = stepper_speed_gen;
 3e8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <stepper_speed_gen>
 3ec:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <stepper_speed_gen+0x1>

000003f0 <.Loc.31>:
 3f0:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <stepper_speed_1+0x1>
 3f4:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <stepper_speed_1>

000003f8 <.Loc.32>:
        stepper_speed_2 = stepper_speed_gen + speed_adjustment;
 3f8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <stepper_speed_gen>
 3fc:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <stepper_speed_gen+0x1>
 400:	86 0f       	add	r24, r22
 402:	97 1f       	adc	r25, r23

00000404 <.Loc.34>:
 404:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <stepper_speed_2+0x1>
 408:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <stepper_speed_2>
 40c:	17 c0       	rjmp	.+46     	; 0x43c <.L8>

0000040e <.L10>:
    int speed_adjustment = abs(verschil) * 100;
 40e:	22 27       	eor	r18, r18
 410:	33 27       	eor	r19, r19
 412:	28 1b       	sub	r18, r24
 414:	39 0b       	sbc	r19, r25

00000416 <.Loc.36>:
 416:	dd cf       	rjmp	.-70     	; 0x3d2 <.L6>

00000418 <.L11>:
        stepper_speed_1 = stepper_speed_gen + speed_adjustment;
 418:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <stepper_speed_gen>
 41c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <stepper_speed_gen+0x1>

00000420 <.Loc.39>:
 420:	86 0f       	add	r24, r22
 422:	97 1f       	adc	r25, r23

00000424 <.Loc.40>:
 424:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <stepper_speed_1+0x1>
 428:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <stepper_speed_1>

0000042c <.Loc.41>:
        stepper_speed_2 = stepper_speed_gen;
 42c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <stepper_speed_gen>
 430:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <stepper_speed_gen+0x1>
 434:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <stepper_speed_2+0x1>
 438:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <stepper_speed_2>

0000043c <.L8>:
    } else {
        stepper_speed_1 = stepper_speed_gen;
        stepper_speed_2 = stepper_speed_gen;
    }

    OCR1A = stepper_speed_1;  // linker motor
 43c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <stepper_speed_1>
 440:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <stepper_speed_1+0x1>
 444:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 448:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

0000044c <.Loc.45>:
    OCR3A = stepper_speed_2;  // rechter motor
 44c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <stepper_speed_2>
 450:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <stepper_speed_2+0x1>
 454:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 458:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

0000045c <.Loc.47>:
}
 45c:	08 95       	ret

0000045e <.L9>:
        stepper_speed_1 = stepper_speed_gen;
 45e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <stepper_speed_gen>
 462:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <stepper_speed_gen+0x1>

00000466 <.Loc.50>:
 466:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <stepper_speed_1+0x1>
 46a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <stepper_speed_1>

0000046e <.Loc.51>:
        stepper_speed_2 = stepper_speed_gen;
 46e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <stepper_speed_gen>
 472:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <stepper_speed_gen+0x1>
 476:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <stepper_speed_2+0x1>
 47a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <stepper_speed_2>
 47e:	de cf       	rjmp	.-68     	; 0x43c <.L8>

00000480 <stuur_om_latje>:
void stuur_om_latje(uint8_t richting) {
    int normaal_snel = 2000;
    int bijstuur_snel = 5000;  // iets sneller om weg te sturen van wand
    int afstand_drempel = 6;  // in cm

    if (richting == RICHTING_RECHTS) {
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	99 f0       	breq	.+38     	; 0x4aa <.L17>

00000484 <.Loc.59>:
            OCR1A = bijstuur_snel;
            OCR3A = normaal_snel;
        }
    } else {
        // Linksom draaien  linker sensor actief
        if (centimeters_1 < afstand_drempel) {
 484:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <centimeters_1>
 488:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <centimeters_1+0x1>

0000048c <.Loc.61>:
 48c:	06 97       	sbiw	r24, 0x06	; 6
 48e:	6c f5       	brge	.+90     	; 0x4ea <.L16>

00000490 <.Loc.62>:
            // Wand links dichtbij wijk af naar rechts
            OCR1A = bijstuur_snel;      // linker sneller
 490:	88 e8       	ldi	r24, 0x88	; 136
 492:	93 e1       	ldi	r25, 0x13	; 19
 494:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 498:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

0000049c <.Loc.64>:
            OCR3A = normaal_snel;
 49c:	80 ed       	ldi	r24, 0xD0	; 208
 49e:	97 e0       	ldi	r25, 0x07	; 7
 4a0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 4a4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 4a8:	08 95       	ret

000004aa <.L17>:
        if (centimeters_2 < afstand_drempel) {
 4aa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <centimeters_2>
 4ae:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <centimeters_2+0x1>

000004b2 <.Loc.68>:
 4b2:	06 97       	sbiw	r24, 0x06	; 6
 4b4:	6c f4       	brge	.+26     	; 0x4d0 <.L14>

000004b6 <.Loc.69>:
            OCR1A = normaal_snel;       // linker motor normaal
 4b6:	80 ed       	ldi	r24, 0xD0	; 208
 4b8:	97 e0       	ldi	r25, 0x07	; 7
 4ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 4be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

000004c2 <.Loc.71>:
            OCR3A = bijstuur_snel;      // rechter sneller
 4c2:	88 e8       	ldi	r24, 0x88	; 136
 4c4:	93 e1       	ldi	r25, 0x13	; 19
 4c6:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 4ca:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 4ce:	08 95       	ret

000004d0 <.L14>:
            OCR1A = bijstuur_snel;
 4d0:	88 e8       	ldi	r24, 0x88	; 136
 4d2:	93 e1       	ldi	r25, 0x13	; 19
 4d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 4d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

000004dc <.Loc.75>:
            OCR3A = normaal_snel;
 4dc:	80 ed       	ldi	r24, 0xD0	; 208
 4de:	97 e0       	ldi	r25, 0x07	; 7
 4e0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 4e4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 4e8:	08 95       	ret

000004ea <.L16>:
        } else {
            // Wand niet dichtbij standaard draai
            OCR1A = normaal_snel;
 4ea:	80 ed       	ldi	r24, 0xD0	; 208
 4ec:	97 e0       	ldi	r25, 0x07	; 7
 4ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 4f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

000004f6 <.Loc.79>:
            OCR3A = bijstuur_snel;
 4f6:	88 e8       	ldi	r24, 0x88	; 136
 4f8:	93 e1       	ldi	r25, 0x13	; 19
 4fa:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 4fe:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

00000502 <.Loc.81>:
        }
    }
}
 502:	08 95       	ret

00000504 <stepper_init>:


void stepper_init() {
    DDRB |= STEP1 | DIR1 | DIR2 | EN1 | EN2;
 504:	84 b1       	in	r24, 0x04	; 4

00000506 <.Loc.84>:
 506:	8f 64       	ori	r24, 0x4F	; 79
 508:	84 b9       	out	0x04, r24	; 4

0000050a <.Loc.85>:
    DDRE |= STEP2;
 50a:	6c 9a       	sbi	0x0d, 4	; 13

0000050c <.Loc.87>:
    PORTB |= DIR2;
 50c:	2a 9a       	sbi	0x05, 2	; 5

0000050e <.Loc.89>:
    PORTB &= ~DIR1;
 50e:	28 98       	cbi	0x05, 0	; 5

00000510 <.Loc.91>:
    PORTB |= EN1 | EN2;
 510:	85 b1       	in	r24, 0x05	; 5

00000512 <.Loc.92>:
 512:	8a 60       	ori	r24, 0x0A	; 10
 514:	85 b9       	out	0x05, r24	; 5

00000516 <.Loc.93>:

    TCCR1A = (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);
 516:	93 e2       	ldi	r25, 0x23	; 35
 518:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>

0000051c <.Loc.95>:
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
 51c:	8a e1       	ldi	r24, 0x1A	; 26
 51e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>

00000522 <.Loc.97>:
    TIMSK1 = 0;
 522:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>

00000526 <.Loc.100>:

    TCCR3A = (1 << COM3B1) | (1 << WGM31) | (1 << WGM30);
 526:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>

0000052a <.Loc.101>:
    TCCR3B = (1 << WGM33) | (1 << WGM32) | (1 << CS31);
 52a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>

0000052e <.Loc.103>:
    TIMSK3 = 0;
 52e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>

00000532 <.Loc.105>:

    stepper_speed_gen = 10000;
 532:	80 e1       	ldi	r24, 0x10	; 16
 534:	97 e2       	ldi	r25, 0x27	; 39
 536:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <stepper_speed_gen+0x1>
 53a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <stepper_speed_gen>

0000053e <.Loc.107>:
    OCR1A = stepper_speed_gen;
 53e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <stepper_speed_gen>
 542:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <stepper_speed_gen+0x1>
 546:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 54a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

0000054e <.Loc.109>:
    OCR3A = stepper_speed_gen;
 54e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <stepper_speed_gen>
 552:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <stepper_speed_gen+0x1>
 556:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 55a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

0000055e <.Loc.111>:

    OCR1B = 4;
 55e:	84 e0       	ldi	r24, 0x04	; 4
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 566:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>

0000056a <.Loc.113>:
    OCR3B = 4;
 56a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
 56e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>

00000572 <.Loc.115>:

    sei(); // interrupts aan
 572:	78 94       	sei

00000574 <.Loc.116>:
}
 574:	08 95       	ret

00000576 <uart3_init>:


// ---------------- UART3 ----------------

void uart3_init(void) {
    UBRR3H = (uint8_t)(UBRR_VALUE >> 8);
 576:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>

0000057a <.Loc.3>:
    UBRR3L = (uint8_t)UBRR_VALUE;
 57a:	87 e6       	ldi	r24, 0x67	; 103
 57c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>

00000580 <.Loc.5>:
    UCSR3B = (1 << TXEN3) | (1 << RXEN3) | (1 << RXCIE3);  // RX interrupt aan
 580:	88 e9       	ldi	r24, 0x98	; 152
 582:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>

00000586 <.Loc.7>:
    UCSR3C = (1 << UCSZ31) | (1 << UCSZ30);
 586:	86 e0       	ldi	r24, 0x06	; 6
 588:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>

0000058c <.Loc.9>:
    sei(); // Globale interrupts aan
 58c:	78 94       	sei

0000058e <.Loc.10>:
}
 58e:	08 95       	ret

00000590 <uart3_transmit>:

void uart3_transmit(char data) {
    while (!(UCSR3A & (1 << UDRE3)));
 590:	e0 e3       	ldi	r30, 0x30	; 48
 592:	f1 e0       	ldi	r31, 0x01	; 1

00000594 <.L3>:
 594:	90 81       	ld	r25, Z

00000596 <.Loc.16>:
 596:	95 ff       	sbrs	r25, 5
 598:	fd cf       	rjmp	.-6      	; 0x594 <.L3>

0000059a <.Loc.17>:
    UDR3 = data;
 59a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>

0000059e <.Loc.19>:
}
 59e:	08 95       	ret

000005a0 <uart3_print>:

void uart3_print(const char *str) {
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	c8 2f       	mov	r28, r24
 5a6:	d9 2f       	mov	r29, r25

000005a8 <.Loc.22>:
    while (*str) {
 5a8:	88 81       	ld	r24, Y
 5aa:	88 23       	and	r24, r24
 5ac:	31 f0       	breq	.+12     	; 0x5ba <.L5>
 5ae:	21 96       	adiw	r28, 0x01	; 1

000005b0 <.L7>:
        uart3_transmit(*str++);
 5b0:	0e 94 c8 02 	call	0x590	; 0x590 <uart3_transmit>

000005b4 <.LVL4>:
    while (*str) {
 5b4:	89 91       	ld	r24, Y+

000005b6 <.Loc.27>:
 5b6:	81 11       	cpse	r24, r1
 5b8:	fb cf       	rjmp	.-10     	; 0x5b0 <.L7>

000005ba <.L5>:
    }
}
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <uart3_transmit_hex>:

void uart3_transmit_hex(uint8_t value) {
 5c0:	0f 93       	push	r16
 5c2:	1f 93       	push	r17
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	00 d0       	rcall	.+0      	; 0x5ca <L0^A>

000005ca <L0^A>:
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62

000005ce <.Loc.31>:
    char hex[3];
    snprintf(hex, sizeof(hex), "%02X", value);
 5ce:	1f 92       	push	r1
 5d0:	8f 93       	push	r24
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	92 e0       	ldi	r25, 0x02	; 2

000005d6 <.Loc.33>:
 5d6:	9f 93       	push	r25
 5d8:	8f 93       	push	r24
 5da:	1f 92       	push	r1
 5dc:	83 e0       	ldi	r24, 0x03	; 3
 5de:	8f 93       	push	r24
 5e0:	8e 01       	movw	r16, r28
 5e2:	0f 5f       	subi	r16, 0xFF	; 255
 5e4:	1f 4f       	sbci	r17, 0xFF	; 255
 5e6:	1f 93       	push	r17
 5e8:	0f 93       	push	r16
 5ea:	0e 94 cf 03 	call	0x79e	; 0x79e <snprintf>

000005ee <.LVL9>:
    uart3_print(hex);
 5ee:	c8 01       	movw	r24, r16
 5f0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <uart3_print>

000005f4 <.LVL10>:
}
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	f8 94       	cli
 5f8:	de bf       	out	0x3e, r29	; 62
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	cd bf       	out	0x3d, r28	; 61
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	08 95       	ret

0000060e <uart3_available>:

uint8_t uart3_available(void) {
    return (UART_BUFFER_SIZE + uart3_head - uart3_tail) % UART_BUFFER_SIZE;
 60e:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <uart3_head>

00000612 <.Loc.39>:
 612:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <uart3_tail>

00000616 <.Loc.40>:
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	20 5c       	subi	r18, 0xC0	; 192
 61a:	3f 4f       	sbci	r19, 0xFF	; 255

0000061c <.Loc.41>:
 61c:	28 1b       	sub	r18, r24
 61e:	31 09       	sbc	r19, r1

00000620 <.Loc.42>:
 620:	c9 01       	movw	r24, r18
 622:	8f 73       	andi	r24, 0x3F	; 63
 624:	90 78       	andi	r25, 0x80	; 128
 626:	33 23       	and	r19, r19
 628:	0c f0       	brlt	.+2      	; 0x62c <.L12>

0000062a <.L11>:
}
 62a:	08 95       	ret

0000062c <.L12>:
    return (UART_BUFFER_SIZE + uart3_head - uart3_tail) % UART_BUFFER_SIZE;
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	80 6c       	ori	r24, 0xC0	; 192
 630:	9f 6f       	ori	r25, 0xFF	; 255
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	fa cf       	rjmp	.-12     	; 0x62a <.L11>

00000636 <uart3_read>:

char uart3_read(void) {
    if (uart3_head == uart3_tail) return 0; // leeg
 636:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <uart3_head>
 63a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <uart3_tail>

0000063e <.Loc.48>:
 63e:	98 17       	cp	r25, r24
 640:	81 f0       	breq	.+32     	; 0x662 <.L16>

00000642 <.Loc.49>:
    char data = uart3_buffer[uart3_tail];
 642:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <uart3_tail>
 646:	f0 e0       	ldi	r31, 0x00	; 0

00000648 <.Loc.51>:
 648:	e0 5e       	subi	r30, 0xE0	; 224
 64a:	fd 4f       	sbci	r31, 0xFD	; 253
 64c:	80 81       	ld	r24, Z

0000064e <.Loc.52>:
    uart3_tail = (uart3_tail + 1) % UART_BUFFER_SIZE;
 64e:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <uart3_tail>
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	2f 5f       	subi	r18, 0xFF	; 255
 656:	3f 4f       	sbci	r19, 0xFF	; 255

00000658 <.Loc.54>:
 658:	2f 73       	andi	r18, 0x3F	; 63
 65a:	30 78       	andi	r19, 0x80	; 128

0000065c <.Loc.55>:
 65c:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <uart3_tail>

00000660 <.Loc.56>:
    return data;
 660:	08 95       	ret

00000662 <.L16>:
    if (uart3_head == uart3_tail) return 0; // leeg
 662:	80 e0       	ldi	r24, 0x00	; 0

00000664 <.Loc.59>:
}
 664:	08 95       	ret

00000666 <__vector_54>:

ISR(USART3_RX_vect) {
 666:	1f 92       	push	r1
 668:	1f b6       	in	r1, 0x3f	; 63
 66a:	1f 92       	push	r1
 66c:	11 24       	eor	r1, r1
 66e:	8f 93       	push	r24
 670:	8b b7       	in	r24, 0x3b	; 59
 672:	8f 93       	push	r24
 674:	9f 93       	push	r25
 676:	ef 93       	push	r30
 678:	ff 93       	push	r31

0000067a <.Loc.61>:
    agv_buffer[agv_index++] = UDR3;
 67a:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <agv_index>
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	8e 0f       	add	r24, r30
 682:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <agv_index>
 686:	f0 e0       	ldi	r31, 0x00	; 0

00000688 <.Loc.63>:
 688:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>

0000068c <.Loc.64>:
 68c:	e6 5e       	subi	r30, 0xE6	; 230
 68e:	fd 4f       	sbci	r31, 0xFD	; 253
 690:	80 83       	st	Z, r24

00000692 <.Loc.65>:

    if (agv_index == 4) {
 692:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <agv_index>

00000696 <.Loc.67>:
 696:	84 30       	cpi	r24, 0x04	; 4
 698:	51 f0       	breq	.+20     	; 0x6ae <.L24>

0000069a <.L17>:
            huidige_state = STATE_SCHUIF_RECHTS;

        }

    }
}
 69a:	ff 91       	pop	r31
 69c:	ef 91       	pop	r30
 69e:	9f 91       	pop	r25
 6a0:	8f 91       	pop	r24
 6a2:	8b bf       	out	0x3b, r24	; 59
 6a4:	8f 91       	pop	r24
 6a6:	1f 90       	pop	r1
 6a8:	1f be       	out	0x3f, r1	; 63
 6aa:	1f 90       	pop	r1
 6ac:	18 95       	reti

000006ae <.L24>:
        cmd = agv_buffer[0];
 6ae:	ea e1       	ldi	r30, 0x1A	; 26
 6b0:	f2 e0       	ldi	r31, 0x02	; 2
 6b2:	80 81       	ld	r24, Z

000006b4 <.Loc.71>:
 6b4:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <cmd>

000006b8 <.Loc.72>:
        param = agv_buffer[1];
 6b8:	81 81       	ldd	r24, Z+1	; 0x01

000006ba <.Loc.74>:
 6ba:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <param>

000006be <.Loc.75>:
        agv_index = 0;
 6be:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <agv_index>

000006c2 <.Loc.77>:
        if (cmd == 0x01) {
 6c2:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <cmd>

000006c6 <.Loc.79>:
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	f9 f0       	breq	.+62     	; 0x708 <.L25>

000006ca <.Loc.80>:
        else if (cmd == 0x01 && param == 0x7F) {
 6ca:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <cmd>

000006ce <.Loc.82>:
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	11 f1       	breq	.+68     	; 0x716 <.L26>

000006d2 <.L20>:
        else if (cmd == 0x02 && param == 0x01) {
 6d2:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <cmd>

000006d6 <.Loc.85>:
 6d6:	82 30       	cpi	r24, 0x02	; 2
 6d8:	49 f1       	breq	.+82     	; 0x72c <.L27>

000006da <.L21>:
        else if (cmd == 0x02 && param == 0x02) {
 6da:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <cmd>

000006de <.Loc.88>:
 6de:	82 30       	cpi	r24, 0x02	; 2
 6e0:	61 f1       	breq	.+88     	; 0x73a <.L28>

000006e2 <.L22>:
        else if (cmd == 0x03 && param == 0x01) {
 6e2:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <cmd>

000006e6 <.Loc.91>:
 6e6:	83 30       	cpi	r24, 0x03	; 3
 6e8:	81 f1       	breq	.+96     	; 0x74a <.L29>

000006ea <.L23>:
        else if (cmd == 0x03 && param == 0x02) {
 6ea:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <cmd>

000006ee <.Loc.94>:
 6ee:	83 30       	cpi	r24, 0x03	; 3
 6f0:	a1 f6       	brne	.-88     	; 0x69a <.L17>

000006f2 <.Loc.95>:
 6f2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <param>

000006f6 <.Loc.96>:
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	81 f6       	brne	.-96     	; 0x69a <.L17>

000006fa <.Loc.97>:
            huidige_state = STATE_SCHUIF_RECHTS;
 6fa:	84 e0       	ldi	r24, 0x04	; 4
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <huidige_state+0x1>
 702:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <huidige_state>

00000706 <.Loc.99>:
}
 706:	c9 cf       	rjmp	.-110    	; 0x69a <.L17>

00000708 <.L25>:
            huidige_state = STATE_RIJDEN;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <huidige_state+0x1>
 710:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <huidige_state>
 714:	c2 cf       	rjmp	.-124    	; 0x69a <.L17>

00000716 <.L26>:
        else if (cmd == 0x01 && param == 0x7F) {
 716:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <param>

0000071a <.Loc.103>:
 71a:	8f 37       	cpi	r24, 0x7F	; 127
 71c:	d1 f6       	brne	.-76     	; 0x6d2 <.L20>

0000071e <.Loc.104>:
            huidige_state = STATE_STOPPEN;
 71e:	83 e0       	ldi	r24, 0x03	; 3
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <huidige_state+0x1>
 726:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <huidige_state>
 72a:	b7 cf       	rjmp	.-146    	; 0x69a <.L17>

0000072c <.L27>:
        else if (cmd == 0x02 && param == 0x01) {
 72c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <param>

00000730 <.Loc.107>:
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	99 f6       	brne	.-90     	; 0x6da <.L21>

00000734 <.Loc.108>:
            huidige_richting = RICHTING_LINKS;
 734:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <huidige_richting>
 738:	b0 cf       	rjmp	.-160    	; 0x69a <.L17>

0000073a <.L28>:
        else if (cmd == 0x02 && param == 0x02) {
 73a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <param>

0000073e <.Loc.111>:
 73e:	82 30       	cpi	r24, 0x02	; 2
 740:	81 f6       	brne	.-96     	; 0x6e2 <.L22>

00000742 <.Loc.112>:
            huidige_richting = RICHTING_RECHTS;
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <huidige_richting>
 748:	a8 cf       	rjmp	.-176    	; 0x69a <.L17>

0000074a <.L29>:
        else if (cmd == 0x03 && param == 0x01) {
 74a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <param>

0000074e <.Loc.115>:
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	61 f6       	brne	.-104    	; 0x6ea <.L23>

00000752 <.Loc.116>:
            huidige_state = STATE_SCHUIF_LINKS;
 752:	85 e0       	ldi	r24, 0x05	; 5
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <huidige_state+0x1>
 75a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <huidige_state>
 75e:	9d cf       	rjmp	.-198    	; 0x69a <.L17>

00000760 <agv_send_simple_command>:

// ---------------- AGV Commando's via UART3 ----------------

void agv_send_simple_command(uint8_t commando) {
    uart3_transmit(commando);
 760:	0e 94 c8 02 	call	0x590	; 0x590 <uart3_transmit>

00000764 <.LVL14>:
    uart3_transmit(0xFF);
 764:	8f ef       	ldi	r24, 0xFF	; 255
 766:	0e 94 c8 02 	call	0x590	; 0x590 <uart3_transmit>

0000076a <.LVL15>:
    uart3_transmit(0xFF);
 76a:	8f ef       	ldi	r24, 0xFF	; 255
 76c:	0e 94 c8 02 	call	0x590	; 0x590 <uart3_transmit>

00000770 <.LVL16>:
    uart3_transmit(0xFF);
 770:	8f ef       	ldi	r24, 0xFF	; 255
 772:	0e 94 c8 02 	call	0x590	; 0x590 <uart3_transmit>

00000776 <.LVL17>:
}
 776:	08 95       	ret

00000778 <agv_send_flag>:

void agv_send_flag(void) {
    agv_send_simple_command(0x01);
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	0e 94 b0 03 	call	0x760	; 0x760 <agv_send_simple_command>

0000077e <.LVL18>:
}
 77e:	08 95       	ret

00000780 <__umulhisi3>:
 780:	a2 9f       	mul	r26, r18

00000782 <.Loc.1>:
 782:	b0 01       	movw	r22, r0

00000784 <.Loc.2>:
 784:	b3 9f       	mul	r27, r19

00000786 <.Loc.3>:
 786:	c0 01       	movw	r24, r0

00000788 <.Loc.4>:
 788:	a3 9f       	mul	r26, r19

0000078a <.Loc.5>:
 78a:	70 0d       	add	r23, r0

0000078c <.Loc.6>:
 78c:	81 1d       	adc	r24, r1

0000078e <.Loc.7>:
 78e:	11 24       	eor	r1, r1

00000790 <.Loc.8>:
 790:	91 1d       	adc	r25, r1

00000792 <.Loc.9>:
 792:	b2 9f       	mul	r27, r18

00000794 <.Loc.10>:
 794:	70 0d       	add	r23, r0

00000796 <.Loc.11>:
 796:	81 1d       	adc	r24, r1

00000798 <.Loc.12>:
 798:	11 24       	eor	r1, r1

0000079a <.Loc.13>:
 79a:	91 1d       	adc	r25, r1

0000079c <.Loc.14>:
 79c:	08 95       	ret

0000079e <snprintf>:
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	2e 97       	sbiw	r28, 0x0e	; 14
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	0e 89       	ldd	r16, Y+22	; 0x16
 7b8:	1f 89       	ldd	r17, Y+23	; 0x17
 7ba:	86 e0       	ldi	r24, 0x06	; 6
 7bc:	8c 83       	std	Y+4, r24	; 0x04
 7be:	1a 83       	std	Y+2, r17	; 0x02
 7c0:	09 83       	std	Y+1, r16	; 0x01
 7c2:	88 8d       	ldd	r24, Y+24	; 0x18
 7c4:	99 8d       	ldd	r25, Y+25	; 0x19
 7c6:	81 30       	cpi	r24, 0x01	; 1
 7c8:	20 e8       	ldi	r18, 0x80	; 128
 7ca:	92 07       	cpc	r25, r18
 7cc:	10 f0       	brcs	.+4      	; 0x7d2 <.L2>
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e8       	ldi	r25, 0x80	; 128

000007d2 <.L2>:
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	9e 83       	std	Y+6, r25	; 0x06
 7d6:	8d 83       	std	Y+5, r24	; 0x05
 7d8:	ae 01       	movw	r20, r28
 7da:	44 5e       	subi	r20, 0xE4	; 228
 7dc:	5f 4f       	sbci	r21, 0xFF	; 255
 7de:	6a 8d       	ldd	r22, Y+26	; 0x1a
 7e0:	7b 8d       	ldd	r23, Y+27	; 0x1b
 7e2:	ce 01       	movw	r24, r28
 7e4:	01 96       	adiw	r24, 0x01	; 1
 7e6:	0e 94 0e 04 	call	0x81c	; 0x81c <vfprintf>
 7ea:	4d 81       	ldd	r20, Y+5	; 0x05
 7ec:	5e 81       	ldd	r21, Y+6	; 0x06
 7ee:	57 fd       	sbrc	r21, 7
 7f0:	0a c0       	rjmp	.+20     	; 0x806 <.L1>
 7f2:	2f 81       	ldd	r18, Y+7	; 0x07
 7f4:	38 85       	ldd	r19, Y+8	; 0x08
 7f6:	42 17       	cp	r20, r18
 7f8:	53 07       	cpc	r21, r19
 7fa:	0c f4       	brge	.+2      	; 0x7fe <.L4>
 7fc:	9a 01       	movw	r18, r20

000007fe <.L4>:
 7fe:	02 0f       	add	r16, r18
 800:	13 1f       	adc	r17, r19
 802:	f8 01       	movw	r30, r16
 804:	10 82       	st	Z, r1

00000806 <.L1>:
 806:	2e 96       	adiw	r28, 0x0e	; 14
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	f8 94       	cli
 80c:	de bf       	out	0x3e, r29	; 62
 80e:	0f be       	out	0x3f, r0	; 63
 810:	cd bf       	out	0x3d, r28	; 61
 812:	df 91       	pop	r29
 814:	cf 91       	pop	r28
 816:	1f 91       	pop	r17
 818:	0f 91       	pop	r16
 81a:	08 95       	ret

0000081c <vfprintf>:
 81c:	5f 92       	push	r5
 81e:	6f 92       	push	r6
 820:	7f 92       	push	r7
 822:	8f 92       	push	r8
 824:	9f 92       	push	r9
 826:	af 92       	push	r10
 828:	bf 92       	push	r11
 82a:	cf 92       	push	r12
 82c:	df 92       	push	r13
 82e:	ef 92       	push	r14
 830:	ff 92       	push	r15
 832:	0f 93       	push	r16
 834:	1f 93       	push	r17
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	cd b7       	in	r28, 0x3d	; 61
 83c:	de b7       	in	r29, 0x3e	; 62
 83e:	2f 97       	sbiw	r28, 0x0f	; 15
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	f8 94       	cli
 844:	de bf       	out	0x3e, r29	; 62
 846:	0f be       	out	0x3f, r0	; 63
 848:	cd bf       	out	0x3d, r28	; 61
 84a:	6c 01       	movw	r12, r24
 84c:	7b 01       	movw	r14, r22
 84e:	8a 01       	movw	r16, r20
 850:	dc 01       	movw	r26, r24
 852:	17 96       	adiw	r26, 0x07	; 7
 854:	1c 92       	st	X, r1
 856:	1e 92       	st	-X, r1
 858:	16 97       	sbiw	r26, 0x06	; 6
 85a:	13 96       	adiw	r26, 0x03	; 3
 85c:	8c 91       	ld	r24, X
 85e:	81 ff       	sbrs	r24, 1
 860:	fe c1       	rjmp	.+1020   	; 0xc5e <.L79>
 862:	2a e0       	ldi	r18, 0x0A	; 10
 864:	52 2e       	mov	r5, r18

00000866 <.L3>:
 866:	f6 01       	movw	r30, r12
 868:	93 81       	ldd	r25, Z+3	; 0x03
 86a:	f7 01       	movw	r30, r14
 86c:	93 fd       	sbrc	r25, 3
 86e:	85 91       	lpm	r24, Z+
 870:	93 ff       	sbrs	r25, 3
 872:	81 91       	ld	r24, Z+
 874:	7f 01       	movw	r14, r30
 876:	88 23       	and	r24, r24
 878:	09 f4       	brne	.+2      	; 0x87c <L0^A+0x2>

0000087a <L0^A>:
 87a:	73 c0       	rjmp	.+230    	; 0x962 <.L4>
 87c:	85 32       	cpi	r24, 0x25	; 37
 87e:	39 f4       	brne	.+14     	; 0x88e <.L5>
 880:	93 fd       	sbrc	r25, 3
 882:	85 91       	lpm	r24, Z+
 884:	93 ff       	sbrs	r25, 3
 886:	81 91       	ld	r24, Z+
 888:	7f 01       	movw	r14, r30
 88a:	85 32       	cpi	r24, 0x25	; 37
 88c:	29 f4       	brne	.+10     	; 0x898 <.L80>

0000088e <.L5>:
 88e:	b6 01       	movw	r22, r12
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	0e 94 48 06 	call	0xc90	; 0xc90 <fputc>
 896:	e7 cf       	rjmp	.-50     	; 0x866 <.L3>

00000898 <.L80>:
 898:	91 2c       	mov	r9, r1
 89a:	61 2c       	mov	r6, r1
 89c:	71 2c       	mov	r7, r1

0000089e <.L6>:
 89e:	ff e1       	ldi	r31, 0x1F	; 31
 8a0:	f7 15       	cp	r31, r7
 8a2:	08 f4       	brcc	.+2      	; 0x8a6 <L0^A+0x2>

000008a4 <L0^A>:
 8a4:	46 c0       	rjmp	.+140    	; 0x932 <.L8>
 8a6:	8b 32       	cpi	r24, 0x2B	; 43
 8a8:	c9 f1       	breq	.+114    	; 0x91c <.L9>
 8aa:	f8 f4       	brcc	.+62     	; 0x8ea <.L10>
 8ac:	80 32       	cpi	r24, 0x20	; 32
 8ae:	c1 f1       	breq	.+112    	; 0x920 <.L11>
 8b0:	83 32       	cpi	r24, 0x23	; 35
 8b2:	09 f4       	brne	.+2      	; 0x8b6 <.L13>

000008b4 <L0^A>:
 8b4:	3b c0       	rjmp	.+118    	; 0x92c <.L12>

000008b6 <.L13>:
 8b6:	83 36       	cpi	r24, 0x63	; 99
 8b8:	09 f4       	brne	.+2      	; 0x8bc <L0^A+0x2>

000008ba <L0^A>:
 8ba:	9c c0       	rjmp	.+312    	; 0x9f4 <.L25>
 8bc:	83 37       	cpi	r24, 0x73	; 115
 8be:	09 f4       	brne	.+2      	; 0x8c2 <L0^A+0x2>

000008c0 <L0^A>:
 8c0:	a5 c0       	rjmp	.+330    	; 0xa0c <.L26>
 8c2:	83 35       	cpi	r24, 0x53	; 83
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <L0^A+0x2>

000008c6 <L0^A>:
 8c6:	c8 c0       	rjmp	.+400    	; 0xa58 <.L128>
 8c8:	f8 01       	movw	r30, r16
 8ca:	a1 90       	ld	r10, Z+
 8cc:	b1 90       	ld	r11, Z+
 8ce:	8f 01       	movw	r16, r30
 8d0:	69 2d       	mov	r22, r9
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	76 fc       	sbrc	r7, 6
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <.L32>
 8d8:	6f ef       	ldi	r22, 0xFF	; 255
 8da:	7f ef       	ldi	r23, 0xFF	; 255

000008dc <.L32>:
 8dc:	c5 01       	movw	r24, r10
 8de:	0e 94 32 06 	call	0xc64	; 0xc64 <strnlen_P>
 8e2:	4c 01       	movw	r8, r24
 8e4:	68 94       	set
 8e6:	77 f8       	bld	r7, 7
 8e8:	71 c0       	rjmp	.+226    	; 0x9cc <.L31>

000008ea <.L10>:
 8ea:	8d 32       	cpi	r24, 0x2D	; 45
 8ec:	e1 f0       	breq	.+56     	; 0x926 <.L14>
 8ee:	80 33       	cpi	r24, 0x30	; 48
 8f0:	51 f0       	breq	.+20     	; 0x906 <.L15>
 8f2:	20 ed       	ldi	r18, 0xD0	; 208
 8f4:	28 0f       	add	r18, r24
 8f6:	2a 30       	cpi	r18, 0x0A	; 10
 8f8:	48 f1       	brcs	.+82     	; 0x94c <.L16>
 8fa:	8e 32       	cpi	r24, 0x2E	; 46
 8fc:	09 f0       	breq	.+2      	; 0x900 <.L21>

000008fe <L0^A>:
 8fe:	4b c0       	rjmp	.+150    	; 0x996 <.L22>

00000900 <.L21>:
 900:	68 94       	set
 902:	76 f8       	bld	r7, 6
 904:	02 c0       	rjmp	.+4      	; 0x90a <.L18>

00000906 <.L15>:
 906:	68 94       	set
 908:	70 f8       	bld	r7, 0

0000090a <.L18>:
 90a:	f7 01       	movw	r30, r14
 90c:	93 fd       	sbrc	r25, 3
 90e:	85 91       	lpm	r24, Z+
 910:	93 ff       	sbrs	r25, 3
 912:	81 91       	ld	r24, Z+
 914:	7f 01       	movw	r14, r30
 916:	81 11       	cpse	r24, r1
 918:	c2 cf       	rjmp	.-124    	; 0x89e <.L6>
 91a:	45 c0       	rjmp	.+138    	; 0x9a6 <.L19>

0000091c <.L9>:
 91c:	68 94       	set
 91e:	71 f8       	bld	r7, 1

00000920 <.L11>:
 920:	68 94       	set
 922:	72 f8       	bld	r7, 2
 924:	f2 cf       	rjmp	.-28     	; 0x90a <.L18>

00000926 <.L14>:
 926:	68 94       	set
 928:	73 f8       	bld	r7, 3
 92a:	ef cf       	rjmp	.-34     	; 0x90a <.L18>

0000092c <.L12>:
 92c:	68 94       	set
 92e:	74 f8       	bld	r7, 4
 930:	ec cf       	rjmp	.-40     	; 0x90a <.L18>

00000932 <.L8>:
 932:	77 fc       	sbrc	r7, 7
 934:	38 c0       	rjmp	.+112    	; 0x9a6 <.L19>
 936:	20 ed       	ldi	r18, 0xD0	; 208
 938:	28 0f       	add	r18, r24
 93a:	2a 30       	cpi	r18, 0x0A	; 10
 93c:	70 f4       	brcc	.+28     	; 0x95a <.L20>
 93e:	76 fe       	sbrs	r7, 6
 940:	05 c0       	rjmp	.+10     	; 0x94c <.L16>
 942:	95 9c       	mul	r9, r5
 944:	20 0d       	add	r18, r0
 946:	11 24       	eor	r1, r1
 948:	92 2e       	mov	r9, r18
 94a:	df cf       	rjmp	.-66     	; 0x90a <.L18>

0000094c <.L16>:
 94c:	65 9c       	mul	r6, r5
 94e:	20 0d       	add	r18, r0
 950:	11 24       	eor	r1, r1
 952:	62 2e       	mov	r6, r18
 954:	68 94       	set
 956:	75 f8       	bld	r7, 5
 958:	d8 cf       	rjmp	.-80     	; 0x90a <.L18>

0000095a <.L20>:
 95a:	8e 32       	cpi	r24, 0x2E	; 46
 95c:	e1 f4       	brne	.+56     	; 0x996 <.L22>
 95e:	76 fe       	sbrs	r7, 6
 960:	cf cf       	rjmp	.-98     	; 0x900 <.L21>

00000962 <.L4>:
 962:	d6 01       	movw	r26, r12
 964:	16 96       	adiw	r26, 0x06	; 6
 966:	8d 91       	ld	r24, X+
 968:	9c 91       	ld	r25, X

0000096a <.L1>:
 96a:	2f 96       	adiw	r28, 0x0f	; 15
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	f8 94       	cli
 970:	de bf       	out	0x3e, r29	; 62
 972:	0f be       	out	0x3f, r0	; 63
 974:	cd bf       	out	0x3d, r28	; 61
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	ff 90       	pop	r15
 980:	ef 90       	pop	r14
 982:	df 90       	pop	r13
 984:	cf 90       	pop	r12
 986:	bf 90       	pop	r11
 988:	af 90       	pop	r10
 98a:	9f 90       	pop	r9
 98c:	8f 90       	pop	r8
 98e:	7f 90       	pop	r7
 990:	6f 90       	pop	r6
 992:	5f 90       	pop	r5
 994:	08 95       	ret

00000996 <.L22>:
 996:	8c 36       	cpi	r24, 0x6C	; 108
 998:	19 f4       	brne	.+6      	; 0x9a0 <.L23>
 99a:	68 94       	set
 99c:	77 f8       	bld	r7, 7
 99e:	b5 cf       	rjmp	.-150    	; 0x90a <.L18>

000009a0 <.L23>:
 9a0:	88 36       	cpi	r24, 0x68	; 104
 9a2:	09 f4       	brne	.+2      	; 0x9a6 <.L19>

000009a4 <L0^A>:
 9a4:	b2 cf       	rjmp	.-156    	; 0x90a <.L18>

000009a6 <.L19>:
 9a6:	98 2f       	mov	r25, r24
 9a8:	9f 7d       	andi	r25, 0xDF	; 223
 9aa:	95 54       	subi	r25, 0x45	; 69
 9ac:	93 30       	cpi	r25, 0x03	; 3
 9ae:	08 f0       	brcs	.+2      	; 0x9b2 <L0^A+0x2>

000009b0 <L0^A>:
 9b0:	82 cf       	rjmp	.-252    	; 0x8b6 <.L13>
 9b2:	0c 5f       	subi	r16, 0xFC	; 252
 9b4:	1f 4f       	sbci	r17, 0xFF	; 255
 9b6:	8f e3       	ldi	r24, 0x3F	; 63
 9b8:	89 83       	std	Y+1, r24	; 0x01
 9ba:	88 24       	eor	r8, r8
 9bc:	83 94       	inc	r8
 9be:	91 2c       	mov	r9, r1
 9c0:	ae 01       	movw	r20, r28
 9c2:	4f 5f       	subi	r20, 0xFF	; 255
 9c4:	5f 4f       	sbci	r21, 0xFF	; 255
 9c6:	5a 01       	movw	r10, r20

000009c8 <.L29>:
 9c8:	e8 94       	clt
 9ca:	77 f8       	bld	r7, 7

000009cc <.L31>:
 9cc:	73 fc       	sbrc	r7, 3
 9ce:	05 c0       	rjmp	.+10     	; 0x9da <.L34>

000009d0 <.L33>:
 9d0:	86 2d       	mov	r24, r6
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	88 16       	cp	r8, r24
 9d6:	99 06       	cpc	r9, r25
 9d8:	40 f1       	brcs	.+80     	; 0xa2a <.L35>

000009da <.L34>:
 9da:	81 14       	cp	r8, r1
 9dc:	91 04       	cpc	r9, r1
 9de:	61 f5       	brne	.+88     	; 0xa38 <.L38>

000009e0 <.L39>:
 9e0:	66 20       	and	r6, r6
 9e2:	09 f4       	brne	.+2      	; 0x9e6 <L0^A+0x2>

000009e4 <L0^A>:
 9e4:	40 cf       	rjmp	.-384    	; 0x866 <.L3>
 9e6:	b6 01       	movw	r22, r12
 9e8:	80 e2       	ldi	r24, 0x20	; 32
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 48 06 	call	0xc90	; 0xc90 <fputc>
 9f0:	6a 94       	dec	r6
 9f2:	f6 cf       	rjmp	.-20     	; 0x9e0 <.L39>

000009f4 <.L25>:
 9f4:	d8 01       	movw	r26, r16
 9f6:	8c 91       	ld	r24, X
 9f8:	89 83       	std	Y+1, r24	; 0x01
 9fa:	0e 5f       	subi	r16, 0xFE	; 254
 9fc:	1f 4f       	sbci	r17, 0xFF	; 255
 9fe:	88 24       	eor	r8, r8
 a00:	83 94       	inc	r8
 a02:	91 2c       	mov	r9, r1
 a04:	fe 01       	movw	r30, r28
 a06:	31 96       	adiw	r30, 0x01	; 1
 a08:	5f 01       	movw	r10, r30
 a0a:	de cf       	rjmp	.-68     	; 0x9c8 <.L29>

00000a0c <.L26>:
 a0c:	d8 01       	movw	r26, r16
 a0e:	ad 90       	ld	r10, X+
 a10:	bd 90       	ld	r11, X+
 a12:	8d 01       	movw	r16, r26
 a14:	69 2d       	mov	r22, r9
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	76 fc       	sbrc	r7, 6
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <.L30>
 a1c:	6f ef       	ldi	r22, 0xFF	; 255
 a1e:	7f ef       	ldi	r23, 0xFF	; 255

00000a20 <.L30>:
 a20:	c5 01       	movw	r24, r10
 a22:	0e 94 3d 06 	call	0xc7a	; 0xc7a <strnlen>
 a26:	4c 01       	movw	r8, r24
 a28:	cf cf       	rjmp	.-98     	; 0x9c8 <.L29>

00000a2a <.L35>:
 a2a:	b6 01       	movw	r22, r12
 a2c:	80 e2       	ldi	r24, 0x20	; 32
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 48 06 	call	0xc90	; 0xc90 <fputc>
 a34:	6a 94       	dec	r6
 a36:	cc cf       	rjmp	.-104    	; 0x9d0 <.L33>

00000a38 <.L38>:
 a38:	f5 01       	movw	r30, r10
 a3a:	77 fc       	sbrc	r7, 7
 a3c:	85 91       	lpm	r24, Z+
 a3e:	77 fe       	sbrs	r7, 7
 a40:	81 91       	ld	r24, Z+
 a42:	5f 01       	movw	r10, r30
 a44:	b6 01       	movw	r22, r12
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 48 06 	call	0xc90	; 0xc90 <fputc>
 a4c:	61 10       	cpse	r6, r1
 a4e:	6a 94       	dec	r6
 a50:	f1 e0       	ldi	r31, 0x01	; 1
 a52:	8f 1a       	sub	r8, r31
 a54:	91 08       	sbc	r9, r1
 a56:	c1 cf       	rjmp	.-126    	; 0x9da <.L34>

00000a58 <.L128>:
 a58:	84 36       	cpi	r24, 0x64	; 100
 a5a:	19 f0       	breq	.+6      	; 0xa62 <.L40>
 a5c:	89 36       	cpi	r24, 0x69	; 105
 a5e:	09 f0       	breq	.+2      	; 0xa62 <.L40>

00000a60 <L0^A>:
 a60:	81 c0       	rjmp	.+258    	; 0xb64 <.L41>

00000a62 <.L40>:
 a62:	f8 01       	movw	r30, r16
 a64:	77 fe       	sbrs	r7, 7
 a66:	77 c0       	rjmp	.+238    	; 0xb56 <.L42>
 a68:	61 91       	ld	r22, Z+
 a6a:	71 91       	ld	r23, Z+
 a6c:	81 91       	ld	r24, Z+
 a6e:	91 91       	ld	r25, Z+

00000a70 <.L129>:
 a70:	8f 01       	movw	r16, r30
 a72:	27 2d       	mov	r18, r7
 a74:	2f 76       	andi	r18, 0x6F	; 111
 a76:	82 2e       	mov	r8, r18
 a78:	97 ff       	sbrs	r25, 7
 a7a:	09 c0       	rjmp	.+18     	; 0xa8e <.L44>
 a7c:	90 95       	com	r25
 a7e:	80 95       	com	r24
 a80:	70 95       	com	r23
 a82:	61 95       	neg	r22
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	68 94       	set
 a8c:	87 f8       	bld	r8, 7

00000a8e <.L44>:
 a8e:	2a e0       	ldi	r18, 0x0A	; 10
 a90:	30 e0       	ldi	r19, 0x00	; 0
 a92:	ae 01       	movw	r20, r28
 a94:	4f 5f       	subi	r20, 0xFF	; 255
 a96:	5f 4f       	sbci	r21, 0xFF	; 255
 a98:	5a 01       	movw	r10, r20
 a9a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__ultoa_invert>
 a9e:	8a 19       	sub	r24, r10
 aa0:	a8 2e       	mov	r10, r24

00000aa2 <.L45>:
 aa2:	ba 2c       	mov	r11, r10
 aa4:	78 2c       	mov	r7, r8
 aa6:	86 fe       	sbrs	r8, 6
 aa8:	0c c0       	rjmp	.+24     	; 0xac2 <.L54>
 aaa:	e8 94       	clt
 aac:	70 f8       	bld	r7, 0
 aae:	a9 14       	cp	r10, r9
 ab0:	40 f4       	brcc	.+16     	; 0xac2 <.L54>
 ab2:	84 fe       	sbrs	r8, 4
 ab4:	05 c0       	rjmp	.+10     	; 0xac0 <.L89>
 ab6:	82 fc       	sbrc	r8, 2
 ab8:	03 c0       	rjmp	.+6      	; 0xac0 <.L89>
 aba:	78 2d       	mov	r23, r8
 abc:	7e 7e       	andi	r23, 0xEE	; 238
 abe:	77 2e       	mov	r7, r23

00000ac0 <.L89>:
 ac0:	b9 2c       	mov	r11, r9

00000ac2 <.L54>:
 ac2:	74 fe       	sbrs	r7, 4
 ac4:	a5 c0       	rjmp	.+330    	; 0xc10 <.L55>
 ac6:	fe 01       	movw	r30, r28
 ac8:	ea 0d       	add	r30, r10
 aca:	f1 1d       	adc	r31, r1
 acc:	80 81       	ld	r24, Z
 ace:	80 33       	cpi	r24, 0x30	; 48
 ad0:	09 f0       	breq	.+2      	; 0xad4 <L0^A+0x2>

00000ad2 <L0^A>:
 ad2:	97 c0       	rjmp	.+302    	; 0xc02 <.L56>
 ad4:	87 2d       	mov	r24, r7
 ad6:	89 7e       	andi	r24, 0xE9	; 233
 ad8:	78 2e       	mov	r7, r24

00000ada <.L57>:
 ada:	73 fc       	sbrc	r7, 3
 adc:	0e c0       	rjmp	.+28     	; 0xafa <.L59>
 ade:	70 fe       	sbrs	r7, 0
 ae0:	a6 c0       	rjmp	.+332    	; 0xc2e <.L90>
 ae2:	9a 2c       	mov	r9, r10
 ae4:	b6 14       	cp	r11, r6
 ae6:	18 f4       	brcc	.+6      	; 0xaee <.L78>
 ae8:	96 0c       	add	r9, r6
 aea:	9b 18       	sub	r9, r11
 aec:	b6 2c       	mov	r11, r6

00000aee <.L78>:
 aee:	86 2d       	mov	r24, r6
 af0:	8b 19       	sub	r24, r11
 af2:	6b 14       	cp	r6, r11
 af4:	08 f4       	brcc	.+2      	; 0xaf8 <.L64>
 af6:	80 e0       	ldi	r24, 0x00	; 0

00000af8 <.L64>:
 af8:	b8 0e       	add	r11, r24

00000afa <.L59>:
 afa:	b6 14       	cp	r11, r6
 afc:	08 f0       	brcs	.+2      	; 0xb00 <L0^A+0x2>

00000afe <L0^A>:
 afe:	99 c0       	rjmp	.+306    	; 0xc32 <.L92>
 b00:	6b 18       	sub	r6, r11

00000b02 <.L65>:
 b02:	74 fe       	sbrs	r7, 4
 b04:	98 c0       	rjmp	.+304    	; 0xc36 <.L66>
 b06:	b6 01       	movw	r22, r12
 b08:	80 e3       	ldi	r24, 0x30	; 48
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 48 06 	call	0xc90	; 0xc90 <fputc>
 b10:	72 fe       	sbrs	r7, 2
 b12:	09 c0       	rjmp	.+18     	; 0xb26 <.L73>
 b14:	88 e5       	ldi	r24, 0x58	; 88
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	71 fc       	sbrc	r7, 1
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <.L69>
 b1c:	88 e7       	ldi	r24, 0x78	; 120
 b1e:	90 e0       	ldi	r25, 0x00	; 0

00000b20 <.L69>:
 b20:	b6 01       	movw	r22, r12

00000b22 <.L132>:
 b22:	0e 94 48 06 	call	0xc90	; 0xc90 <fputc>

00000b26 <.L73>:
 b26:	a9 14       	cp	r10, r9
 b28:	08 f4       	brcc	.+2      	; 0xb2c <L0^A+0x2>

00000b2a <L0^A>:
 b2a:	92 c0       	rjmp	.+292    	; 0xc50 <.L74>
 b2c:	aa 94       	dec	r10
 b2e:	b1 2c       	mov	r11, r1
 b30:	9f ef       	ldi	r25, 0xFF	; 255
 b32:	a9 1a       	sub	r10, r25
 b34:	b9 0a       	sbc	r11, r25
 b36:	de 01       	movw	r26, r28
 b38:	11 96       	adiw	r26, 0x01	; 1
 b3a:	4d 01       	movw	r8, r26
 b3c:	aa 0e       	add	r10, r26
 b3e:	bb 1e       	adc	r11, r27

00000b40 <.L75>:
 b40:	f5 01       	movw	r30, r10
 b42:	82 91       	ld	r24, -Z
 b44:	5f 01       	movw	r10, r30
 b46:	b6 01       	movw	r22, r12
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 48 06 	call	0xc90	; 0xc90 <fputc>
 b4e:	8a 14       	cp	r8, r10
 b50:	9b 04       	cpc	r9, r11
 b52:	b1 f7       	brne	.-20     	; 0xb40 <.L75>
 b54:	45 cf       	rjmp	.-374    	; 0x9e0 <.L39>

00000b56 <.L42>:
 b56:	61 91       	ld	r22, Z+
 b58:	71 91       	ld	r23, Z+
 b5a:	07 2e       	mov	r0, r23
 b5c:	00 0c       	add	r0, r0
 b5e:	88 0b       	sbc	r24, r24
 b60:	99 0b       	sbc	r25, r25
 b62:	86 cf       	rjmp	.-244    	; 0xa70 <.L129>

00000b64 <.L41>:
 b64:	87 2c       	mov	r8, r7
 b66:	e8 94       	clt
 b68:	84 f8       	bld	r8, 4
 b6a:	2a e0       	ldi	r18, 0x0A	; 10
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	85 37       	cpi	r24, 0x75	; 117
 b70:	69 f0       	breq	.+26     	; 0xb8c <.L47>
 b72:	57 2d       	mov	r21, r7
 b74:	59 7f       	andi	r21, 0xF9	; 249
 b76:	85 2e       	mov	r8, r21
 b78:	80 37       	cpi	r24, 0x70	; 112
 b7a:	71 f1       	breq	.+92     	; 0xbd8 <.L48>
 b7c:	18 f5       	brcc	.+70     	; 0xbc4 <.L49>
 b7e:	88 35       	cpi	r24, 0x58	; 88
 b80:	71 f1       	breq	.+92     	; 0xbde <.L50>
 b82:	8f 36       	cpi	r24, 0x6F	; 111
 b84:	09 f0       	breq	.+2      	; 0xb88 <L0^A+0x2>

00000b86 <L0^A>:
 b86:	ed ce       	rjmp	.-550    	; 0x962 <.L4>
 b88:	28 e0       	ldi	r18, 0x08	; 8
 b8a:	30 e0       	ldi	r19, 0x00	; 0

00000b8c <.L47>:
 b8c:	f8 01       	movw	r30, r16
 b8e:	87 fe       	sbrs	r8, 7
 b90:	2e c0       	rjmp	.+92     	; 0xbee <.L52>
 b92:	81 91       	ld	r24, Z+
 b94:	91 91       	ld	r25, Z+
 b96:	a1 91       	ld	r26, Z+
 b98:	b1 91       	ld	r27, Z+
 b9a:	8c 87       	std	Y+12, r24	; 0x0c
 b9c:	9d 87       	std	Y+13, r25	; 0x0d
 b9e:	ae 87       	std	Y+14, r26	; 0x0e
 ba0:	bf 87       	std	Y+15, r27	; 0x0f

00000ba2 <.L130>:
 ba2:	8f 01       	movw	r16, r30
 ba4:	be 01       	movw	r22, r28
 ba6:	6f 5f       	subi	r22, 0xFF	; 255
 ba8:	7f 4f       	sbci	r23, 0xFF	; 255
 baa:	5b 01       	movw	r10, r22
 bac:	ab 01       	movw	r20, r22
 bae:	6c 85       	ldd	r22, Y+12	; 0x0c
 bb0:	7d 85       	ldd	r23, Y+13	; 0x0d
 bb2:	8e 85       	ldd	r24, Y+14	; 0x0e
 bb4:	9f 85       	ldd	r25, Y+15	; 0x0f
 bb6:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__ultoa_invert>
 bba:	8a 19       	sub	r24, r10
 bbc:	a8 2e       	mov	r10, r24
 bbe:	e8 94       	clt
 bc0:	87 f8       	bld	r8, 7
 bc2:	6f cf       	rjmp	.-290    	; 0xaa2 <.L45>

00000bc4 <.L49>:
 bc4:	88 37       	cpi	r24, 0x78	; 120
 bc6:	09 f0       	breq	.+2      	; 0xbca <.L51>

00000bc8 <L0^A>:
 bc8:	cc ce       	rjmp	.-616    	; 0x962 <.L4>

00000bca <.L51>:
 bca:	84 fe       	sbrs	r8, 4
 bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <.L84>
 bce:	68 94       	set
 bd0:	82 f8       	bld	r8, 2

00000bd2 <.L84>:
 bd2:	20 e1       	ldi	r18, 0x10	; 16
 bd4:	30 e0       	ldi	r19, 0x00	; 0
 bd6:	da cf       	rjmp	.-76     	; 0xb8c <.L47>

00000bd8 <.L48>:
 bd8:	68 94       	set
 bda:	84 f8       	bld	r8, 4
 bdc:	f6 cf       	rjmp	.-20     	; 0xbca <.L51>

00000bde <.L50>:
 bde:	74 fe       	sbrs	r7, 4
 be0:	03 c0       	rjmp	.+6      	; 0xbe8 <.L85>
 be2:	65 2f       	mov	r22, r21
 be4:	66 60       	ori	r22, 0x06	; 6
 be6:	86 2e       	mov	r8, r22

00000be8 <.L85>:
 be8:	20 e1       	ldi	r18, 0x10	; 16
 bea:	32 e0       	ldi	r19, 0x02	; 2
 bec:	cf cf       	rjmp	.-98     	; 0xb8c <.L47>

00000bee <.L52>:
 bee:	81 91       	ld	r24, Z+
 bf0:	91 91       	ld	r25, Z+
 bf2:	ac 01       	movw	r20, r24
 bf4:	60 e0       	ldi	r22, 0x00	; 0
 bf6:	70 e0       	ldi	r23, 0x00	; 0
 bf8:	4c 87       	std	Y+12, r20	; 0x0c
 bfa:	5d 87       	std	Y+13, r21	; 0x0d
 bfc:	6e 87       	std	Y+14, r22	; 0x0e
 bfe:	7f 87       	std	Y+15, r23	; 0x0f
 c00:	d0 cf       	rjmp	.-96     	; 0xba2 <.L130>

00000c02 <.L56>:
 c02:	72 fc       	sbrc	r7, 2
 c04:	02 c0       	rjmp	.+4      	; 0xc0a <.L58>

00000c06 <.L131>:
 c06:	b3 94       	inc	r11
 c08:	68 cf       	rjmp	.-304    	; 0xada <.L57>

00000c0a <.L58>:
 c0a:	b3 94       	inc	r11
 c0c:	b3 94       	inc	r11
 c0e:	65 cf       	rjmp	.-310    	; 0xada <.L57>

00000c10 <.L55>:
 c10:	87 2d       	mov	r24, r7
 c12:	86 78       	andi	r24, 0x86	; 134
 c14:	88 23       	and	r24, r24
 c16:	09 f4       	brne	.+2      	; 0xc1a <L0^A+0x2>

00000c18 <L0^A>:
 c18:	60 cf       	rjmp	.-320    	; 0xada <.L57>
 c1a:	f5 cf       	rjmp	.-22     	; 0xc06 <.L131>

00000c1c <.L62>:
 c1c:	b6 01       	movw	r22, r12
 c1e:	80 e2       	ldi	r24, 0x20	; 32
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	0e 94 48 06 	call	0xc90	; 0xc90 <fputc>
 c26:	83 94       	inc	r8

00000c28 <.L60>:
 c28:	86 14       	cp	r8, r6
 c2a:	c0 f3       	brcs	.-16     	; 0xc1c <.L62>
 c2c:	60 cf       	rjmp	.-320    	; 0xaee <.L78>

00000c2e <.L90>:
 c2e:	8b 2c       	mov	r8, r11
 c30:	fb cf       	rjmp	.-10     	; 0xc28 <.L60>

00000c32 <.L92>:
 c32:	61 2c       	mov	r6, r1
 c34:	66 cf       	rjmp	.-308    	; 0xb02 <.L65>

00000c36 <.L66>:
 c36:	87 2d       	mov	r24, r7
 c38:	86 78       	andi	r24, 0x86	; 134
 c3a:	88 23       	and	r24, r24
 c3c:	09 f4       	brne	.+2      	; 0xc40 <L0^A+0x2>

00000c3e <L0^A>:
 c3e:	73 cf       	rjmp	.-282    	; 0xb26 <.L73>
 c40:	8b e2       	ldi	r24, 0x2B	; 43
 c42:	71 fe       	sbrs	r7, 1
 c44:	80 e2       	ldi	r24, 0x20	; 32
 c46:	77 fc       	sbrc	r7, 7
 c48:	8d e2       	ldi	r24, 0x2D	; 45
 c4a:	b6 01       	movw	r22, r12
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	69 cf       	rjmp	.-302    	; 0xb22 <.L132>

00000c50 <.L74>:
 c50:	b6 01       	movw	r22, r12
 c52:	80 e3       	ldi	r24, 0x30	; 48
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	0e 94 48 06 	call	0xc90	; 0xc90 <fputc>
 c5a:	9a 94       	dec	r9
 c5c:	64 cf       	rjmp	.-312    	; 0xb26 <.L73>

00000c5e <.L79>:
 c5e:	8f ef       	ldi	r24, 0xFF	; 255
 c60:	9f ef       	ldi	r25, 0xFF	; 255
 c62:	83 ce       	rjmp	.-762    	; 0x96a <.L1>

00000c64 <strnlen_P>:
 c64:	fc 01       	movw	r30, r24

00000c66 <.L_strnlen_P_loop>:
 c66:	05 90       	lpm	r0, Z+
 c68:	61 50       	subi	r22, 0x01	; 1
 c6a:	70 40       	sbci	r23, 0x00	; 0
 c6c:	01 10       	cpse	r0, r1
 c6e:	d8 f7       	brcc	.-10     	; 0xc66 <.L_strnlen_P_loop>
 c70:	80 95       	com	r24
 c72:	90 95       	com	r25
 c74:	8e 0f       	add	r24, r30
 c76:	9f 1f       	adc	r25, r31
 c78:	08 95       	ret

00000c7a <strnlen>:
 c7a:	fc 01       	movw	r30, r24

00000c7c <.L_strnlen_loop>:
 c7c:	61 50       	subi	r22, 0x01	; 1
 c7e:	70 40       	sbci	r23, 0x00	; 0
 c80:	01 90       	ld	r0, Z+
 c82:	01 10       	cpse	r0, r1
 c84:	d8 f7       	brcc	.-10     	; 0xc7c <.L_strnlen_loop>
 c86:	80 95       	com	r24
 c88:	90 95       	com	r25
 c8a:	8e 0f       	add	r24, r30
 c8c:	9f 1f       	adc	r25, r31
 c8e:	08 95       	ret

00000c90 <fputc>:
 c90:	0f 93       	push	r16
 c92:	1f 93       	push	r17
 c94:	cf 93       	push	r28
 c96:	df 93       	push	r29
 c98:	18 2f       	mov	r17, r24
 c9a:	09 2f       	mov	r16, r25
 c9c:	eb 01       	movw	r28, r22
 c9e:	8b 81       	ldd	r24, Y+3	; 0x03
 ca0:	81 fd       	sbrc	r24, 1
 ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <.L2>

00000ca4 <.L7>:
 ca4:	1f ef       	ldi	r17, 0xFF	; 255
 ca6:	0f ef       	ldi	r16, 0xFF	; 255

00000ca8 <.L3>:
 ca8:	81 2f       	mov	r24, r17
 caa:	90 2f       	mov	r25, r16
 cac:	df 91       	pop	r29
 cae:	cf 91       	pop	r28
 cb0:	1f 91       	pop	r17
 cb2:	0f 91       	pop	r16
 cb4:	08 95       	ret

00000cb6 <.L2>:
 cb6:	82 ff       	sbrs	r24, 2
 cb8:	14 c0       	rjmp	.+40     	; 0xce2 <.L4>
 cba:	2e 81       	ldd	r18, Y+6	; 0x06
 cbc:	3f 81       	ldd	r19, Y+7	; 0x07
 cbe:	8c 81       	ldd	r24, Y+4	; 0x04
 cc0:	9d 81       	ldd	r25, Y+5	; 0x05
 cc2:	28 17       	cp	r18, r24
 cc4:	39 07       	cpc	r19, r25
 cc6:	3c f4       	brge	.+14     	; 0xcd6 <.L8>
 cc8:	e8 81       	ld	r30, Y
 cca:	f9 81       	ldd	r31, Y+1	; 0x01
 ccc:	cf 01       	movw	r24, r30
 cce:	01 96       	adiw	r24, 0x01	; 1
 cd0:	99 83       	std	Y+1, r25	; 0x01
 cd2:	88 83       	st	Y, r24
 cd4:	10 83       	st	Z, r17

00000cd6 <.L8>:
 cd6:	8e 81       	ldd	r24, Y+6	; 0x06
 cd8:	9f 81       	ldd	r25, Y+7	; 0x07
 cda:	01 96       	adiw	r24, 0x01	; 1
 cdc:	9f 83       	std	Y+7, r25	; 0x07
 cde:	8e 83       	std	Y+6, r24	; 0x06
 ce0:	e3 cf       	rjmp	.-58     	; 0xca8 <.L3>

00000ce2 <.L4>:
 ce2:	e8 85       	ldd	r30, Y+8	; 0x08
 ce4:	f9 85       	ldd	r31, Y+9	; 0x09
 ce6:	81 2f       	mov	r24, r17
 ce8:	19 95       	eicall
 cea:	89 2b       	or	r24, r25
 cec:	a1 f3       	breq	.-24     	; 0xcd6 <.L8>
 cee:	da cf       	rjmp	.-76     	; 0xca4 <.L7>

00000cf0 <__ultoa_invert>:
 cf0:	fa 01       	movw	r30, r20
 cf2:	aa 27       	eor	r26, r26
 cf4:	28 30       	cpi	r18, 0x08	; 8
 cf6:	51 f1       	breq	.+84     	; 0xd4c <.L_oct>
 cf8:	20 31       	cpi	r18, 0x10	; 16
 cfa:	81 f1       	breq	.+96     	; 0xd5c <.L_hex>
 cfc:	e8 94       	clt

00000cfe <.L_dec_loop>:
 cfe:	6f 93       	push	r22
 d00:	6e 7f       	andi	r22, 0xFE	; 254
 d02:	6e 5f       	subi	r22, 0xFE	; 254
 d04:	7f 4f       	sbci	r23, 0xFF	; 255
 d06:	8f 4f       	sbci	r24, 0xFF	; 255
 d08:	9f 4f       	sbci	r25, 0xFF	; 255
 d0a:	af 4f       	sbci	r26, 0xFF	; 255
 d0c:	b1 e0       	ldi	r27, 0x01	; 1
 d0e:	3e d0       	rcall	.+124    	; 0xd8c <.L_div_add>
 d10:	b4 e0       	ldi	r27, 0x04	; 4
 d12:	3c d0       	rcall	.+120    	; 0xd8c <.L_div_add>
 d14:	67 0f       	add	r22, r23
 d16:	78 1f       	adc	r23, r24
 d18:	89 1f       	adc	r24, r25
 d1a:	9a 1f       	adc	r25, r26
 d1c:	a1 1d       	adc	r26, r1
 d1e:	68 0f       	add	r22, r24
 d20:	79 1f       	adc	r23, r25
 d22:	8a 1f       	adc	r24, r26
 d24:	91 1d       	adc	r25, r1
 d26:	a1 1d       	adc	r26, r1
 d28:	6a 0f       	add	r22, r26
 d2a:	71 1d       	adc	r23, r1
 d2c:	81 1d       	adc	r24, r1
 d2e:	91 1d       	adc	r25, r1
 d30:	a1 1d       	adc	r26, r1
 d32:	20 d0       	rcall	.+64     	; 0xd74 <.L_lsr_4>
 d34:	09 f4       	brne	.+2      	; 0xd38 <.L1^B1>
 d36:	68 94       	set

00000d38 <.L1^B1>:
 d38:	3f 91       	pop	r19
 d3a:	2a e0       	ldi	r18, 0x0A	; 10
 d3c:	26 9f       	mul	r18, r22
 d3e:	11 24       	eor	r1, r1
 d40:	30 19       	sub	r19, r0
 d42:	30 5d       	subi	r19, 0xD0	; 208
 d44:	31 93       	st	Z+, r19
 d46:	de f6       	brtc	.-74     	; 0xcfe <.L_dec_loop>

00000d48 <.L_eos>:
 d48:	cf 01       	movw	r24, r30
 d4a:	08 95       	ret

00000d4c <.L_oct>:
 d4c:	46 2f       	mov	r20, r22
 d4e:	47 70       	andi	r20, 0x07	; 7
 d50:	40 5d       	subi	r20, 0xD0	; 208
 d52:	41 93       	st	Z+, r20
 d54:	b3 e0       	ldi	r27, 0x03	; 3
 d56:	0f d0       	rcall	.+30     	; 0xd76 <.L_lsr>
 d58:	c9 f7       	brne	.-14     	; 0xd4c <.L_oct>
 d5a:	f6 cf       	rjmp	.-20     	; 0xd48 <.L_eos>

00000d5c <.L_hex>:
 d5c:	46 2f       	mov	r20, r22
 d5e:	4f 70       	andi	r20, 0x0F	; 15
 d60:	40 5d       	subi	r20, 0xD0	; 208
 d62:	4a 33       	cpi	r20, 0x3A	; 58
 d64:	18 f0       	brcs	.+6      	; 0xd6c <.L3^B1>
 d66:	49 5d       	subi	r20, 0xD9	; 217
 d68:	31 fd       	sbrc	r19, 1
 d6a:	40 52       	subi	r20, 0x20	; 32

00000d6c <.L3^B1>:
 d6c:	41 93       	st	Z+, r20
 d6e:	02 d0       	rcall	.+4      	; 0xd74 <.L_lsr_4>
 d70:	a9 f7       	brne	.-22     	; 0xd5c <.L_hex>
 d72:	ea cf       	rjmp	.-44     	; 0xd48 <.L_eos>

00000d74 <.L_lsr_4>:
 d74:	b4 e0       	ldi	r27, 0x04	; 4

00000d76 <.L_lsr>:
 d76:	a6 95       	lsr	r26
 d78:	97 95       	ror	r25
 d7a:	87 95       	ror	r24
 d7c:	77 95       	ror	r23
 d7e:	67 95       	ror	r22
 d80:	ba 95       	dec	r27
 d82:	c9 f7       	brne	.-14     	; 0xd76 <.L_lsr>
 d84:	00 97       	sbiw	r24, 0x00	; 0
 d86:	61 05       	cpc	r22, r1
 d88:	71 05       	cpc	r23, r1
 d8a:	08 95       	ret

00000d8c <.L_div_add>:
 d8c:	9b 01       	movw	r18, r22
 d8e:	ac 01       	movw	r20, r24
 d90:	0a 2e       	mov	r0, r26

00000d92 <.L7^B1>:
 d92:	06 94       	lsr	r0
 d94:	57 95       	ror	r21
 d96:	47 95       	ror	r20
 d98:	37 95       	ror	r19
 d9a:	27 95       	ror	r18
 d9c:	ba 95       	dec	r27
 d9e:	c9 f7       	brne	.-14     	; 0xd92 <.L7^B1>
 da0:	62 0f       	add	r22, r18
 da2:	73 1f       	adc	r23, r19
 da4:	84 1f       	adc	r24, r20
 da6:	95 1f       	adc	r25, r21
 da8:	a0 1d       	adc	r26, r0
 daa:	08 95       	ret

00000dac <_exit>:
 dac:	f8 94       	cli

00000dae <__stop_program>:
 dae:	ff cf       	rjmp	.-2      	; 0xdae <__stop_program>
